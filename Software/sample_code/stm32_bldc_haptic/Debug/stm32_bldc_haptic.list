
stm32_bldc_haptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c1c  08004c1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c1c  08004c1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c1c  08004c1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08004c30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004c30  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001efa  00000000  00000000  0002f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00030fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  00031f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000182e0  00000000  00000000  00032e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc0f  00000000  00000000  0004b148  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d668  00000000  00000000  00056d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e43bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004280  00000000  00000000  000e443c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bd8 	.word	0x08004bd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004bd8 	.word	0x08004bd8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f004 fb00 	bl	800476c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d101      	bne.n	8000442 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800043e:	2301      	movs	r3, #1
 8000440:	e043      	b.n	80004ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <HAL_DMA_Init+0xa8>)
 800044a:	4413      	add	r3, r2
 800044c:	4a22      	ldr	r2, [pc, #136]	; (80004d8 <HAL_DMA_Init+0xac>)
 800044e:	fba2 2303 	umull	r2, r3, r2, r3
 8000452:	091b      	lsrs	r3, r3, #4
 8000454:	009a      	lsls	r2, r3, #2
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <HAL_DMA_Init+0xb0>)
 800045e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2202      	movs	r2, #2
 8000464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000476:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800047a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800049c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2201      	movs	r2, #1
 80004bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	bffdfff8 	.word	0xbffdfff8
 80004d8:	cccccccd 	.word	0xcccccccd
 80004dc:	40020000 	.word	0x40020000

080004e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d008      	beq.n	8000508 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2204      	movs	r2, #4
 80004fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000504:	2301      	movs	r3, #1
 8000506:	e020      	b.n	800054a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f022 020e 	bic.w	r2, r2, #14
 8000516:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f022 0201 	bic.w	r2, r2, #1
 8000526:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000530:	2101      	movs	r1, #1
 8000532:	fa01 f202 	lsl.w	r2, r1, r2
 8000536:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2201      	movs	r2, #1
 800053c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000548:	7bfb      	ldrb	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000566:	2b02      	cmp	r3, #2
 8000568:	d005      	beq.n	8000576 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2204      	movs	r2, #4
 800056e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000570:	2301      	movs	r3, #1
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	e051      	b.n	800061a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f022 020e 	bic.w	r2, r2, #14
 8000584:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f022 0201 	bic.w	r2, r2, #1
 8000594:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a22      	ldr	r2, [pc, #136]	; (8000624 <HAL_DMA_Abort_IT+0xd0>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d029      	beq.n	80005f4 <HAL_DMA_Abort_IT+0xa0>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <HAL_DMA_Abort_IT+0xd4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d022      	beq.n	80005f0 <HAL_DMA_Abort_IT+0x9c>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a1f      	ldr	r2, [pc, #124]	; (800062c <HAL_DMA_Abort_IT+0xd8>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d01a      	beq.n	80005ea <HAL_DMA_Abort_IT+0x96>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <HAL_DMA_Abort_IT+0xdc>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d012      	beq.n	80005e4 <HAL_DMA_Abort_IT+0x90>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <HAL_DMA_Abort_IT+0xe0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d00a      	beq.n	80005de <HAL_DMA_Abort_IT+0x8a>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <HAL_DMA_Abort_IT+0xe4>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d102      	bne.n	80005d8 <HAL_DMA_Abort_IT+0x84>
 80005d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005d6:	e00e      	b.n	80005f6 <HAL_DMA_Abort_IT+0xa2>
 80005d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005dc:	e00b      	b.n	80005f6 <HAL_DMA_Abort_IT+0xa2>
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	e008      	b.n	80005f6 <HAL_DMA_Abort_IT+0xa2>
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	e005      	b.n	80005f6 <HAL_DMA_Abort_IT+0xa2>
 80005ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ee:	e002      	b.n	80005f6 <HAL_DMA_Abort_IT+0xa2>
 80005f0:	2310      	movs	r3, #16
 80005f2:	e000      	b.n	80005f6 <HAL_DMA_Abort_IT+0xa2>
 80005f4:	2301      	movs	r3, #1
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <HAL_DMA_Abort_IT+0xe8>)
 80005f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2b00      	cmp	r3, #0
 8000610:	d003      	beq.n	800061a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	4798      	blx	r3
    } 
  }
  return status;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40020008 	.word	0x40020008
 8000628:	4002001c 	.word	0x4002001c
 800062c:	40020030 	.word	0x40020030
 8000630:	40020044 	.word	0x40020044
 8000634:	40020058 	.word	0x40020058
 8000638:	4002006c 	.word	0x4002006c
 800063c:	40020000 	.word	0x40020000

08000640 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	2204      	movs	r2, #4
 800065e:	409a      	lsls	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4013      	ands	r3, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	d04f      	beq.n	8000708 <HAL_DMA_IRQHandler+0xc8>
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	2b00      	cmp	r3, #0
 8000670:	d04a      	beq.n	8000708 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 0320 	and.w	r3, r3, #32
 800067c:	2b00      	cmp	r3, #0
 800067e:	d107      	bne.n	8000690 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f022 0204 	bic.w	r2, r2, #4
 800068e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a66      	ldr	r2, [pc, #408]	; (8000830 <HAL_DMA_IRQHandler+0x1f0>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d029      	beq.n	80006ee <HAL_DMA_IRQHandler+0xae>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a65      	ldr	r2, [pc, #404]	; (8000834 <HAL_DMA_IRQHandler+0x1f4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d022      	beq.n	80006ea <HAL_DMA_IRQHandler+0xaa>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a63      	ldr	r2, [pc, #396]	; (8000838 <HAL_DMA_IRQHandler+0x1f8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d01a      	beq.n	80006e4 <HAL_DMA_IRQHandler+0xa4>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a62      	ldr	r2, [pc, #392]	; (800083c <HAL_DMA_IRQHandler+0x1fc>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d012      	beq.n	80006de <HAL_DMA_IRQHandler+0x9e>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a60      	ldr	r2, [pc, #384]	; (8000840 <HAL_DMA_IRQHandler+0x200>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d00a      	beq.n	80006d8 <HAL_DMA_IRQHandler+0x98>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a5f      	ldr	r2, [pc, #380]	; (8000844 <HAL_DMA_IRQHandler+0x204>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d102      	bne.n	80006d2 <HAL_DMA_IRQHandler+0x92>
 80006cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d0:	e00e      	b.n	80006f0 <HAL_DMA_IRQHandler+0xb0>
 80006d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006d6:	e00b      	b.n	80006f0 <HAL_DMA_IRQHandler+0xb0>
 80006d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80006dc:	e008      	b.n	80006f0 <HAL_DMA_IRQHandler+0xb0>
 80006de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e2:	e005      	b.n	80006f0 <HAL_DMA_IRQHandler+0xb0>
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	e002      	b.n	80006f0 <HAL_DMA_IRQHandler+0xb0>
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	e000      	b.n	80006f0 <HAL_DMA_IRQHandler+0xb0>
 80006ee:	2304      	movs	r3, #4
 80006f0:	4a55      	ldr	r2, [pc, #340]	; (8000848 <HAL_DMA_IRQHandler+0x208>)
 80006f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f000 8094 	beq.w	8000826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000706:	e08e      	b.n	8000826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	2202      	movs	r2, #2
 800070e:	409a      	lsls	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d056      	beq.n	80007c6 <HAL_DMA_IRQHandler+0x186>
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	2b00      	cmp	r3, #0
 8000720:	d051      	beq.n	80007c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 0320 	and.w	r3, r3, #32
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10b      	bne.n	8000748 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f022 020a 	bic.w	r2, r2, #10
 800073e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a38      	ldr	r2, [pc, #224]	; (8000830 <HAL_DMA_IRQHandler+0x1f0>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d029      	beq.n	80007a6 <HAL_DMA_IRQHandler+0x166>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a37      	ldr	r2, [pc, #220]	; (8000834 <HAL_DMA_IRQHandler+0x1f4>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d022      	beq.n	80007a2 <HAL_DMA_IRQHandler+0x162>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a35      	ldr	r2, [pc, #212]	; (8000838 <HAL_DMA_IRQHandler+0x1f8>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d01a      	beq.n	800079c <HAL_DMA_IRQHandler+0x15c>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a34      	ldr	r2, [pc, #208]	; (800083c <HAL_DMA_IRQHandler+0x1fc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d012      	beq.n	8000796 <HAL_DMA_IRQHandler+0x156>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a32      	ldr	r2, [pc, #200]	; (8000840 <HAL_DMA_IRQHandler+0x200>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d00a      	beq.n	8000790 <HAL_DMA_IRQHandler+0x150>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <HAL_DMA_IRQHandler+0x204>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d102      	bne.n	800078a <HAL_DMA_IRQHandler+0x14a>
 8000784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000788:	e00e      	b.n	80007a8 <HAL_DMA_IRQHandler+0x168>
 800078a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800078e:	e00b      	b.n	80007a8 <HAL_DMA_IRQHandler+0x168>
 8000790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000794:	e008      	b.n	80007a8 <HAL_DMA_IRQHandler+0x168>
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	e005      	b.n	80007a8 <HAL_DMA_IRQHandler+0x168>
 800079c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a0:	e002      	b.n	80007a8 <HAL_DMA_IRQHandler+0x168>
 80007a2:	2320      	movs	r3, #32
 80007a4:	e000      	b.n	80007a8 <HAL_DMA_IRQHandler+0x168>
 80007a6:	2302      	movs	r3, #2
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <HAL_DMA_IRQHandler+0x208>)
 80007aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d034      	beq.n	8000826 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80007c4:	e02f      	b.n	8000826 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	2208      	movs	r2, #8
 80007cc:	409a      	lsls	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4013      	ands	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d028      	beq.n	8000828 <HAL_DMA_IRQHandler+0x1e8>
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f003 0308 	and.w	r3, r3, #8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d023      	beq.n	8000828 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 020e 	bic.w	r2, r2, #14
 80007ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f8:	2101      	movs	r1, #1
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2201      	movs	r2, #1
 800080a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	4798      	blx	r3
    }
  }
  return;
 8000826:	bf00      	nop
 8000828:	bf00      	nop
}
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40020008 	.word	0x40020008
 8000834:	4002001c 	.word	0x4002001c
 8000838:	40020030 	.word	0x40020030
 800083c:	40020044 	.word	0x40020044
 8000840:	40020058 	.word	0x40020058
 8000844:	4002006c 	.word	0x4002006c
 8000848:	40020000 	.word	0x40020000

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	b480      	push	{r7}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e127      	b.n	8000ab0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000860:	2201      	movs	r2, #1
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	429a      	cmp	r2, r3
 800087a:	f040 8116 	bne.w	8000aaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b12      	cmp	r3, #18
 8000884:	d034      	beq.n	80008f0 <HAL_GPIO_Init+0xa4>
 8000886:	2b12      	cmp	r3, #18
 8000888:	d80d      	bhi.n	80008a6 <HAL_GPIO_Init+0x5a>
 800088a:	2b02      	cmp	r3, #2
 800088c:	d02b      	beq.n	80008e6 <HAL_GPIO_Init+0x9a>
 800088e:	2b02      	cmp	r3, #2
 8000890:	d804      	bhi.n	800089c <HAL_GPIO_Init+0x50>
 8000892:	2b00      	cmp	r3, #0
 8000894:	d031      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 8000896:	2b01      	cmp	r3, #1
 8000898:	d01c      	beq.n	80008d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800089a:	e048      	b.n	800092e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800089c:	2b03      	cmp	r3, #3
 800089e:	d043      	beq.n	8000928 <HAL_GPIO_Init+0xdc>
 80008a0:	2b11      	cmp	r3, #17
 80008a2:	d01b      	beq.n	80008dc <HAL_GPIO_Init+0x90>
          break;
 80008a4:	e043      	b.n	800092e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008a6:	4a89      	ldr	r2, [pc, #548]	; (8000acc <HAL_GPIO_Init+0x280>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d026      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008ac:	4a87      	ldr	r2, [pc, #540]	; (8000acc <HAL_GPIO_Init+0x280>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d806      	bhi.n	80008c0 <HAL_GPIO_Init+0x74>
 80008b2:	4a87      	ldr	r2, [pc, #540]	; (8000ad0 <HAL_GPIO_Init+0x284>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d020      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008b8:	4a86      	ldr	r2, [pc, #536]	; (8000ad4 <HAL_GPIO_Init+0x288>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d01d      	beq.n	80008fa <HAL_GPIO_Init+0xae>
          break;
 80008be:	e036      	b.n	800092e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008c0:	4a85      	ldr	r2, [pc, #532]	; (8000ad8 <HAL_GPIO_Init+0x28c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d019      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008c6:	4a85      	ldr	r2, [pc, #532]	; (8000adc <HAL_GPIO_Init+0x290>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d016      	beq.n	80008fa <HAL_GPIO_Init+0xae>
 80008cc:	4a84      	ldr	r2, [pc, #528]	; (8000ae0 <HAL_GPIO_Init+0x294>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d013      	beq.n	80008fa <HAL_GPIO_Init+0xae>
          break;
 80008d2:	e02c      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	623b      	str	r3, [r7, #32]
          break;
 80008da:	e028      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	3304      	adds	r3, #4
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e023      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	3308      	adds	r3, #8
 80008ec:	623b      	str	r3, [r7, #32]
          break;
 80008ee:	e01e      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	330c      	adds	r3, #12
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	e019      	b.n	800092e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000902:	2304      	movs	r3, #4
 8000904:	623b      	str	r3, [r7, #32]
          break;
 8000906:	e012      	b.n	800092e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d105      	bne.n	800091c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000910:	2308      	movs	r3, #8
 8000912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	611a      	str	r2, [r3, #16]
          break;
 800091a:	e008      	b.n	800092e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800091c:	2308      	movs	r3, #8
 800091e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	615a      	str	r2, [r3, #20]
          break;
 8000926:	e002      	b.n	800092e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
          break;
 800092c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	2bff      	cmp	r3, #255	; 0xff
 8000932:	d801      	bhi.n	8000938 <HAL_GPIO_Init+0xec>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	e001      	b.n	800093c <HAL_GPIO_Init+0xf0>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3304      	adds	r3, #4
 800093c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	2bff      	cmp	r3, #255	; 0xff
 8000942:	d802      	bhi.n	800094a <HAL_GPIO_Init+0xfe>
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	e002      	b.n	8000950 <HAL_GPIO_Init+0x104>
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	3b08      	subs	r3, #8
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	210f      	movs	r1, #15
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	401a      	ands	r2, r3
 8000962:	6a39      	ldr	r1, [r7, #32]
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	431a      	orrs	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 8096 	beq.w	8000aaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <HAL_GPIO_Init+0x298>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4a58      	ldr	r2, [pc, #352]	; (8000ae4 <HAL_GPIO_Init+0x298>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6193      	str	r3, [r2, #24]
 800098a:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <HAL_GPIO_Init+0x298>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000996:	4a54      	ldr	r2, [pc, #336]	; (8000ae8 <HAL_GPIO_Init+0x29c>)
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3302      	adds	r3, #2
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	4013      	ands	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4b      	ldr	r2, [pc, #300]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d013      	beq.n	80009ea <HAL_GPIO_Init+0x19e>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d00d      	beq.n	80009e6 <HAL_GPIO_Init+0x19a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a49      	ldr	r2, [pc, #292]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d007      	beq.n	80009e2 <HAL_GPIO_Init+0x196>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a48      	ldr	r2, [pc, #288]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_GPIO_Init+0x192>
 80009da:	2303      	movs	r3, #3
 80009dc:	e006      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009de:	2304      	movs	r3, #4
 80009e0:	e004      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009e2:	2302      	movs	r3, #2
 80009e4:	e002      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <HAL_GPIO_Init+0x1a0>
 80009ea:	2300      	movs	r3, #0
 80009ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ee:	f002 0203 	and.w	r2, r2, #3
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	4093      	lsls	r3, r2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009fc:	493a      	ldr	r1, [pc, #232]	; (8000ae8 <HAL_GPIO_Init+0x29c>)
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a16:	4b39      	ldr	r3, [pc, #228]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4938      	ldr	r1, [pc, #224]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]
 8000a22:	e006      	b.n	8000a32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	4933      	ldr	r1, [pc, #204]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a3e:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	492e      	ldr	r1, [pc, #184]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	604b      	str	r3, [r1, #4]
 8000a4a:	e006      	b.n	8000a5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4929      	ldr	r1, [pc, #164]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a56:	4013      	ands	r3, r2
 8000a58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d006      	beq.n	8000a74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	4924      	ldr	r1, [pc, #144]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	608b      	str	r3, [r1, #8]
 8000a72:	e006      	b.n	8000a82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	491f      	ldr	r1, [pc, #124]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	491a      	ldr	r1, [pc, #104]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60cb      	str	r3, [r1, #12]
 8000a9a:	e006      	b.n	8000aaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	4915      	ldr	r1, [pc, #84]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	3301      	adds	r3, #1
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f47f aed0 	bne.w	8000860 <HAL_GPIO_Init+0x14>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	372c      	adds	r7, #44	; 0x2c
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10110000 	.word	0x10110000
 8000ad4:	10120000 	.word	0x10120000
 8000ad8:	10310000 	.word	0x10310000
 8000adc:	10320000 	.word	0x10320000
 8000ae0:	10220000 	.word	0x10220000
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	40010800 	.word	0x40010800
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40011400 	.word	0x40011400
 8000afc:	40010400 	.word	0x40010400

08000b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b10:	787b      	ldrb	r3, [r7, #1]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b1c:	e003      	b.n	8000b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	041a      	lsls	r2, r3, #16
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	611a      	str	r2, [r3, #16]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e11f      	b.n	8000d82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f003 fe3a 	bl	80047d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2224      	movs	r2, #36	; 0x24
 8000b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b94:	f001 fb90 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 8000b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a7b      	ldr	r2, [pc, #492]	; (8000d8c <HAL_I2C_Init+0x25c>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d807      	bhi.n	8000bb4 <HAL_I2C_Init+0x84>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4a7a      	ldr	r2, [pc, #488]	; (8000d90 <HAL_I2C_Init+0x260>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	bf94      	ite	ls
 8000bac:	2301      	movls	r3, #1
 8000bae:	2300      	movhi	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	e006      	b.n	8000bc2 <HAL_I2C_Init+0x92>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4a77      	ldr	r2, [pc, #476]	; (8000d94 <HAL_I2C_Init+0x264>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	bf94      	ite	ls
 8000bbc:	2301      	movls	r3, #1
 8000bbe:	2300      	movhi	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0db      	b.n	8000d82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4a72      	ldr	r2, [pc, #456]	; (8000d98 <HAL_I2C_Init+0x268>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	0c9b      	lsrs	r3, r3, #18
 8000bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6a1b      	ldr	r3, [r3, #32]
 8000bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4a64      	ldr	r2, [pc, #400]	; (8000d8c <HAL_I2C_Init+0x25c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d802      	bhi.n	8000c04 <HAL_I2C_Init+0xd4>
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3301      	adds	r3, #1
 8000c02:	e009      	b.n	8000c18 <HAL_I2C_Init+0xe8>
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c0a:	fb02 f303 	mul.w	r3, r2, r3
 8000c0e:	4a63      	ldr	r2, [pc, #396]	; (8000d9c <HAL_I2C_Init+0x26c>)
 8000c10:	fba2 2303 	umull	r2, r3, r2, r3
 8000c14:	099b      	lsrs	r3, r3, #6
 8000c16:	3301      	adds	r3, #1
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	6812      	ldr	r2, [r2, #0]
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	4956      	ldr	r1, [pc, #344]	; (8000d8c <HAL_I2C_Init+0x25c>)
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d80d      	bhi.n	8000c54 <HAL_I2C_Init+0x124>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	1e59      	subs	r1, r3, #1
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	bf38      	it	cc
 8000c50:	2304      	movcc	r3, #4
 8000c52:	e04f      	b.n	8000cf4 <HAL_I2C_Init+0x1c4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d111      	bne.n	8000c80 <HAL_I2C_Init+0x150>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	1e58      	subs	r0, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6859      	ldr	r1, [r3, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	440b      	add	r3, r1
 8000c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bf0c      	ite	eq
 8000c78:	2301      	moveq	r3, #1
 8000c7a:	2300      	movne	r3, #0
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	e012      	b.n	8000ca6 <HAL_I2C_Init+0x176>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	1e58      	subs	r0, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6859      	ldr	r1, [r3, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	0099      	lsls	r1, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf0c      	ite	eq
 8000ca0:	2301      	moveq	r3, #1
 8000ca2:	2300      	movne	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_I2C_Init+0x17e>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e022      	b.n	8000cf4 <HAL_I2C_Init+0x1c4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_I2C_Init+0x1a4>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	1e58      	subs	r0, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6859      	ldr	r1, [r3, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	440b      	add	r3, r1
 8000cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd2:	e00f      	b.n	8000cf4 <HAL_I2C_Init+0x1c4>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1e58      	subs	r0, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6859      	ldr	r1, [r3, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	0099      	lsls	r1, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	6809      	ldr	r1, [r1, #0]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69da      	ldr	r2, [r3, #28]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6911      	ldr	r1, [r2, #16]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68d2      	ldr	r2, [r2, #12]
 8000d2e:	4311      	orrs	r1, r2
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695a      	ldr	r2, [r3, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	000186a0 	.word	0x000186a0
 8000d90:	001e847f 	.word	0x001e847f
 8000d94:	003d08ff 	.word	0x003d08ff
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	10624dd3 	.word	0x10624dd3

08000da0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	4608      	mov	r0, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	461a      	mov	r2, r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	817b      	strh	r3, [r7, #10]
 8000db2:	460b      	mov	r3, r1
 8000db4:	813b      	strh	r3, [r7, #8]
 8000db6:	4613      	mov	r3, r2
 8000db8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000dba:	f7ff fa1f 	bl	80001fc <HAL_GetTick>
 8000dbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b20      	cmp	r3, #32
 8000dca:	f040 80d9 	bne.w	8000f80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2319      	movs	r3, #25
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	496d      	ldr	r1, [pc, #436]	; (8000f8c <HAL_I2C_Mem_Write+0x1ec>)
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 fcbb 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8000de4:	2302      	movs	r3, #2
 8000de6:	e0cc      	b.n	8000f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d101      	bne.n	8000df6 <HAL_I2C_Mem_Write+0x56>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e0c5      	b.n	8000f82 <HAL_I2C_Mem_Write+0x1e2>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d007      	beq.n	8000e1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0201 	orr.w	r2, r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2221      	movs	r2, #33	; 0x21
 8000e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2240      	movs	r2, #64	; 0x40
 8000e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a3a      	ldr	r2, [r7, #32]
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	; (8000f90 <HAL_I2C_Mem_Write+0x1f0>)
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000e5e:	88f8      	ldrh	r0, [r7, #6]
 8000e60:	893a      	ldrh	r2, [r7, #8]
 8000e62:	8979      	ldrh	r1, [r7, #10]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 faf2 	bl	8001458 <I2C_RequestMemoryWrite>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d052      	beq.n	8000f20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e081      	b.n	8000f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 fd3c 	bl	8001900 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00d      	beq.n	8000eaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d107      	bne.n	8000ea6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ea4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e06b      	b.n	8000f82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d11b      	bne.n	8000f20 <HAL_I2C_Mem_Write+0x180>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d017      	beq.n	8000f20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1aa      	bne.n	8000e7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 fd28 	bl	8001982 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d107      	bne.n	8000f50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e016      	b.n	8000f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2220      	movs	r2, #32
 8000f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e000      	b.n	8000f82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8000f80:	2302      	movs	r3, #2
  }
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	00100002 	.word	0x00100002
 8000f90:	ffff0000 	.word	0xffff0000

08000f94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	817b      	strh	r3, [r7, #10]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	813b      	strh	r3, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fb2:	f7ff f923 	bl	80001fc <HAL_GetTick>
 8000fb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b20      	cmp	r3, #32
 8000fc2:	f040 823d 	bne.w	8001440 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2319      	movs	r3, #25
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4981      	ldr	r1, [pc, #516]	; (80011d4 <HAL_I2C_Mem_Read+0x240>)
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 fbbf 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e230      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <HAL_I2C_Mem_Read+0x5a>
 8000fea:	2302      	movs	r3, #2
 8000fec:	e229      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b01      	cmp	r3, #1
 8001002:	d007      	beq.n	8001014 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0201 	orr.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001022:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2222      	movs	r2, #34	; 0x22
 8001028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2240      	movs	r2, #64	; 0x40
 8001030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800104a:	b29a      	uxth	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4a61      	ldr	r2, [pc, #388]	; (80011d8 <HAL_I2C_Mem_Read+0x244>)
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001056:	88f8      	ldrh	r0, [r7, #6]
 8001058:	893a      	ldrh	r2, [r7, #8]
 800105a:	8979      	ldrh	r1, [r7, #10]
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	4603      	mov	r3, r0
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 fa8c 	bl	8001584 <I2C_RequestMemoryRead>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e1e5      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800107a:	2b00      	cmp	r3, #0
 800107c:	d113      	bne.n	80010a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e1b9      	b.n	800141a <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d11d      	bne.n	80010ea <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010bc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010e6:	b662      	cpsie	i
 80010e8:	e197      	b.n	800141a <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d11d      	bne.n	800112e <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001100:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001102:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800112a:	b662      	cpsie	i
 800112c:	e175      	b.n	800141a <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800113c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001154:	e161      	b.n	800141a <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115a:	2b03      	cmp	r3, #3
 800115c:	f200 811a 	bhi.w	8001394 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001164:	2b01      	cmp	r3, #1
 8001166:	d123      	bne.n	80011b0 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 fc49 	bl	8001a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e162      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001198:	3b01      	subs	r3, #1
 800119a:	b29a      	uxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80011ae:	e134      	b.n	800141a <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d150      	bne.n	800125a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011be:	2200      	movs	r2, #0
 80011c0:	4906      	ldr	r1, [pc, #24]	; (80011dc <HAL_I2C_Mem_Read+0x248>)
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 fac6 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d008      	beq.n	80011e0 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e137      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
 80011d2:	bf00      	nop
 80011d4:	00100002 	.word	0x00100002
 80011d8:	ffff0000 	.word	0xffff0000
 80011dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120e:	3b01      	subs	r3, #1
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121a:	b29b      	uxth	r3, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001224:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001242:	3b01      	subs	r3, #1
 8001244:	b29a      	uxth	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124e:	b29b      	uxth	r3, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	b29a      	uxth	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001258:	e0df      	b.n	800141a <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001260:	2200      	movs	r2, #0
 8001262:	497a      	ldr	r1, [pc, #488]	; (800144c <HAL_I2C_Mem_Read+0x4b8>)
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f000 fa75 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0e6      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001282:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80012b8:	4b65      	ldr	r3, [pc, #404]	; (8001450 <HAL_I2C_Mem_Read+0x4bc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	4a65      	ldr	r2, [pc, #404]	; (8001454 <HAL_I2C_Mem_Read+0x4c0>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0a1a      	lsrs	r2, r3, #8
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	00da      	lsls	r2, r3, #3
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d117      	bne.n	800130e <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2220      	movs	r2, #32
 80012e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f043 0220 	orr.w	r2, r3, #32
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001300:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e099      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b04      	cmp	r3, #4
 800131a:	d1da      	bne.n	80012d2 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800132a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	691a      	ldr	r2, [r3, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	3b01      	subs	r3, #1
 800134a:	b29a      	uxth	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001354:	b29b      	uxth	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800135e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137c:	3b01      	subs	r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001388:	b29b      	uxth	r3, r3
 800138a:	3b01      	subs	r3, #1
 800138c:	b29a      	uxth	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001392:	e042      	b.n	800141a <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 fb33 	bl	8001a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e04c      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d118      	bne.n	800141a <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f ae99 	bne.w	8001156 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2220      	movs	r2, #32
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8001440:	2302      	movs	r3, #2
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	00010004 	.word	0x00010004
 8001450:	20000008 	.word	0x20000008
 8001454:	14f8b589 	.word	0x14f8b589

08001458 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	461a      	mov	r2, r3
 8001466:	4603      	mov	r3, r0
 8001468:	817b      	strh	r3, [r7, #10]
 800146a:	460b      	mov	r3, r1
 800146c:	813b      	strh	r3, [r7, #8]
 800146e:	4613      	mov	r3, r2
 8001470:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001480:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	2200      	movs	r2, #0
 800148a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 f960 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00d      	beq.n	80014b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a8:	d103      	bne.n	80014b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e05f      	b.n	8001576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014b6:	897b      	ldrh	r3, [r7, #10]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	6a3a      	ldr	r2, [r7, #32]
 80014ca:	492d      	ldr	r1, [pc, #180]	; (8001580 <I2C_RequestMemoryWrite+0x128>)
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f998 	bl	8001802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e04c      	b.n	8001576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	6a39      	ldr	r1, [r7, #32]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fa02 	bl	8001900 <I2C_WaitOnTXEFlagUntilTimeout>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00d      	beq.n	800151e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	2b04      	cmp	r3, #4
 8001508:	d107      	bne.n	800151a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e02b      	b.n	8001576 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d105      	bne.n	8001530 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001524:	893b      	ldrh	r3, [r7, #8]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	e021      	b.n	8001574 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001530:	893b      	ldrh	r3, [r7, #8]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2da      	uxtb	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f9dc 	bl	8001900 <I2C_WaitOnTXEFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00d      	beq.n	800156a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2b04      	cmp	r3, #4
 8001554:	d107      	bne.n	8001566 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e005      	b.n	8001576 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800156a:	893b      	ldrh	r3, [r7, #8]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	00010002 	.word	0x00010002

08001584 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	817b      	strh	r3, [r7, #10]
 8001596:	460b      	mov	r3, r1
 8001598:	813b      	strh	r3, [r7, #8]
 800159a:	4613      	mov	r3, r2
 800159c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f8c2 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00d      	beq.n	80015f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e4:	d103      	bne.n	80015ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0aa      	b.n	8001748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001600:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	4952      	ldr	r1, [pc, #328]	; (8001750 <I2C_RequestMemoryRead+0x1cc>)
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f8fa 	bl	8001802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e097      	b.n	8001748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f964 	bl	8001900 <I2C_WaitOnTXEFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2b04      	cmp	r3, #4
 8001644:	d107      	bne.n	8001656 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001654:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e076      	b.n	8001748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001660:	893b      	ldrh	r3, [r7, #8]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	e021      	b.n	80016b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800166c:	893b      	ldrh	r3, [r7, #8]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	b29b      	uxth	r3, r3
 8001672:	b2da      	uxtb	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167c:	6a39      	ldr	r1, [r7, #32]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f93e 	bl	8001900 <I2C_WaitOnTXEFlagUntilTimeout>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00d      	beq.n	80016a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b04      	cmp	r3, #4
 8001690:	d107      	bne.n	80016a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e050      	b.n	8001748 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016a6:	893b      	ldrh	r3, [r7, #8]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	6a39      	ldr	r1, [r7, #32]
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f923 	bl	8001900 <I2C_WaitOnTXEFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00d      	beq.n	80016dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d107      	bne.n	80016d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e035      	b.n	8001748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f82b 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00d      	beq.n	8001720 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001712:	d103      	bne.n	800171c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e013      	b.n	8001748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001720:	897b      	ldrh	r3, [r7, #10]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	6a3a      	ldr	r2, [r7, #32]
 8001734:	4906      	ldr	r1, [pc, #24]	; (8001750 <I2C_RequestMemoryRead+0x1cc>)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f863 	bl	8001802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	00010002 	.word	0x00010002

08001754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001764:	e025      	b.n	80017b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d021      	beq.n	80017b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176e:	f7fe fd45 	bl	80001fc <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d302      	bcc.n	8001784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d116      	bne.n	80017b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f043 0220 	orr.w	r2, r3, #32
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e023      	b.n	80017fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10d      	bne.n	80017d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4013      	ands	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf0c      	ite	eq
 80017ce:	2301      	moveq	r3, #1
 80017d0:	2300      	movne	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	e00c      	b.n	80017f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4013      	ands	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d0b6      	beq.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001810:	e051      	b.n	80018b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001820:	d123      	bne.n	800186a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001830:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800183a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f043 0204 	orr.w	r2, r3, #4
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e046      	b.n	80018f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d021      	beq.n	80018b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001872:	f7fe fcc3 	bl	80001fc <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	d302      	bcc.n	8001888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d116      	bne.n	80018b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2220      	movs	r2, #32
 8001892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f043 0220 	orr.w	r2, r3, #32
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e020      	b.n	80018f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	0c1b      	lsrs	r3, r3, #16
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10c      	bne.n	80018da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4013      	ands	r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf14      	ite	ne
 80018d2:	2301      	movne	r3, #1
 80018d4:	2300      	moveq	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	e00b      	b.n	80018f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	43da      	mvns	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	4013      	ands	r3, r2
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d18d      	bne.n	8001812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800190c:	e02d      	b.n	800196a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f8ce 	bl	8001ab0 <I2C_IsAcknowledgeFailed>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e02d      	b.n	800197a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d021      	beq.n	800196a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001926:	f7fe fc69 	bl	80001fc <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	429a      	cmp	r2, r3
 8001934:	d302      	bcc.n	800193c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d116      	bne.n	800196a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f043 0220 	orr.w	r2, r3, #32
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e007      	b.n	800197a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001974:	2b80      	cmp	r3, #128	; 0x80
 8001976:	d1ca      	bne.n	800190e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800198e:	e02d      	b.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f88d 	bl	8001ab0 <I2C_IsAcknowledgeFailed>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e02d      	b.n	80019fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a6:	d021      	beq.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a8:	f7fe fc28 	bl	80001fc <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d302      	bcc.n	80019be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e007      	b.n	80019fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d1ca      	bne.n	8001990 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a10:	e042      	b.n	8001a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d119      	bne.n	8001a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0210 	mvn.w	r2, #16
 8001a28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e029      	b.n	8001aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a54:	f7fe fbd2 	bl	80001fc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d302      	bcc.n	8001a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d116      	bne.n	8001a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e007      	b.n	8001aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d1b5      	bne.n	8001a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac6:	d11b      	bne.n	8001b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f043 0204 	orr.w	r2, r3, #4
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e26c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b2c:	4b92      	ldr	r3, [pc, #584]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d00c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b38:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d112      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5e>
 8001b44:	4b8c      	ldr	r3, [pc, #560]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d10b      	bne.n	8001b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d06c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x12c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d168      	bne.n	8001c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e246      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x76>
 8001b74:	4b80      	ldr	r3, [pc, #512]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a7f      	ldr	r2, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	e02e      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x98>
 8001b8a:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a7a      	ldr	r2, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a77      	ldr	r2, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e01d      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xbc>
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a71      	ldr	r2, [pc, #452]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6e      	ldr	r2, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0xd4>
 8001bc8:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a6a      	ldr	r2, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a67      	ldr	r2, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7fe fb08 	bl	80001fc <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7fe fb04 	bl	80001fc <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1fa      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b5d      	ldr	r3, [pc, #372]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0xe4>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7fe faf4 	bl	80001fc <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7fe faf0 	bl	80001fc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1e6      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x10c>
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d063      	beq.n	8001d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c46:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00b      	beq.n	8001c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c52:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d11c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x18c>
 8001c5e:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d116      	bne.n	8001c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x176>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e1ba      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4939      	ldr	r1, [pc, #228]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	e03a      	b.n	8001d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7fe faa9 	bl	80001fc <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7fe faa5 	bl	80001fc <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e19b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4927      	ldr	r1, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
 8001ce0:	e015      	b.n	8001d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe fa88 	bl	80001fc <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf0:	f7fe fa84 	bl	80001fc <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e17a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d03a      	beq.n	8001d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d019      	beq.n	8001d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7fe fa68 	bl	80001fc <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7fe fa64 	bl	80001fc <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e15a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 fada 	bl	8002308 <RCC_Delay>
 8001d54:	e01c      	b.n	8001d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe fa4e 	bl	80001fc <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d62:	e00f      	b.n	8001d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe fa4a 	bl	80001fc <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d908      	bls.n	8001d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e140      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	42420000 	.word	0x42420000
 8001d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	4b9e      	ldr	r3, [pc, #632]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e9      	bne.n	8001d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a6 	beq.w	8001eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b97      	ldr	r3, [pc, #604]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b94      	ldr	r3, [pc, #592]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	4a93      	ldr	r2, [pc, #588]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	61d3      	str	r3, [r2, #28]
 8001dba:	4b91      	ldr	r3, [pc, #580]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a8a      	ldr	r2, [pc, #552]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fa0b 	bl	80001fc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7fe fa07 	bl	80001fc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0fd      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b81      	ldr	r3, [pc, #516]	; (8002004 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x312>
 8001e10:	4b7b      	ldr	r3, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e02d      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x334>
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a75      	ldr	r2, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a72      	ldr	r2, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	e01c      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x356>
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a6c      	ldr	r2, [pc, #432]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	e00b      	b.n	8001e7a <HAL_RCC_OscConfig+0x36e>
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	4b64      	ldr	r3, [pc, #400]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a63      	ldr	r2, [pc, #396]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d015      	beq.n	8001eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7fe f9bb 	bl	80001fc <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe f9b7 	bl	80001fc <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0ab      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <HAL_RCC_OscConfig+0x37e>
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7fe f9a5 	bl	80001fc <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe f9a1 	bl	80001fc <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e095      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ee      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a47      	ldr	r2, [pc, #284]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8081 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d061      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d146      	bne.n	8001f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7fe f975 	bl	80001fc <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f16:	f7fe f971 	bl	80001fc <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e067      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	492d      	ldr	r1, [pc, #180]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a19      	ldr	r1, [r3, #32]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	430b      	orrs	r3, r1
 8001f62:	4927      	ldr	r1, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe f945 	bl	80001fc <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe f941 	bl	80001fc <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e037      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x46a>
 8001f94:	e02f      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_RCC_OscConfig+0x4fc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe f92e 	bl	80001fc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe f92a 	bl	80001fc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e020      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x498>
 8001fc2:	e018      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e013      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	42420060 	.word	0x42420060

0800200c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0d0      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b67      	ldr	r3, [pc, #412]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4965      	ldr	r1, [pc, #404]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b63      	ldr	r3, [pc, #396]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800208a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208c:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d040      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e073      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06b      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4936      	ldr	r1, [pc, #216]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe f87e 	bl	80001fc <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7fe f87a 	bl	80001fc <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e053      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d210      	bcs.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4922      	ldr	r1, [pc, #136]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800219a:	f000 f821 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	fa21 f303 	lsr.w	r3, r1, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1cc>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_ClockConfig+0x1d0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fd ffdc 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	08004c04 	.word	0x08004c04
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e8:	1d3c      	adds	r4, r7, #4
 80021ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x40>
 800221a:	2b08      	cmp	r3, #8
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x46>
 800221e:	e02d      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002222:	623b      	str	r3, [r7, #32]
      break;
 8002224:	e02d      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002232:	4413      	add	r3, r2
 8002234:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002238:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0c5b      	lsrs	r3, r3, #17
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002252:	4413      	add	r3, r2
 8002254:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002258:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 800225e:	fb02 f203 	mul.w	r2, r2, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	e004      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	623b      	str	r3, [r7, #32]
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_RCC_GetSysClockFreq+0xbc>)
 800227e:	623b      	str	r3, [r7, #32]
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	6a3b      	ldr	r3, [r7, #32]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bc90      	pop	{r4, r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	08004bf0 	.word	0x08004bf0
 8002294:	08004c00 	.word	0x08004c00
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	003d0900 	.word	0x003d0900

080022a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a8:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000008 	.word	0x20000008

080022b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022bc:	f7ff fff2 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022c0:	4601      	mov	r1, r0
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08004c14 	.word	0x08004c14

080022e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80022e8:	4601      	mov	r1, r0
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	0adb      	lsrs	r3, r3, #11
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	08004c14 	.word	0x08004c14

08002308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <RCC_Delay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <RCC_Delay+0x38>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002324:	bf00      	nop
  }
  while (Delay --);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <RCC_Delay+0x1c>
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e041      	b.n	80023da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f002 fa70 	bl	8004850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f000 fc1c 	bl	8002bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d001      	beq.n	80023fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e03a      	b.n	8002472 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_TIM_Base_Start_IT+0x98>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00e      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x58>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002426:	d009      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x58>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_TIM_Base_Start_IT+0x9c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x58>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a13      	ldr	r2, [pc, #76]	; (8002484 <HAL_TIM_Base_Start_IT+0xa0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d111      	bne.n	8002460 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d010      	beq.n	8002470 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245e:	e007      	b.n	8002470 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800

08002488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e041      	b.n	800251e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f839 	bl	8002526 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f000 fb7a 	bl	8002bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_TIM_PWM_Start+0x24>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	bf14      	ite	ne
 8002554:	2301      	movne	r3, #1
 8002556:	2300      	moveq	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e022      	b.n	80025a2 <HAL_TIM_PWM_Start+0x6a>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b04      	cmp	r3, #4
 8002560:	d109      	bne.n	8002576 <HAL_TIM_PWM_Start+0x3e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	e015      	b.n	80025a2 <HAL_TIM_PWM_Start+0x6a>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d109      	bne.n	8002590 <HAL_TIM_PWM_Start+0x58>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e008      	b.n	80025a2 <HAL_TIM_PWM_Start+0x6a>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e05e      	b.n	8002668 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_TIM_PWM_Start+0x82>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b8:	e013      	b.n	80025e2 <HAL_TIM_PWM_Start+0xaa>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d104      	bne.n	80025ca <HAL_TIM_PWM_Start+0x92>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025c8:	e00b      	b.n	80025e2 <HAL_TIM_PWM_Start+0xaa>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d104      	bne.n	80025da <HAL_TIM_PWM_Start+0xa2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025d8:	e003      	b.n	80025e2 <HAL_TIM_PWM_Start+0xaa>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2201      	movs	r2, #1
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fd68 	bl	80030c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_TIM_PWM_Start+0x138>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d107      	bne.n	800260a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_TIM_PWM_Start+0x138>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00e      	beq.n	8002632 <HAL_TIM_PWM_Start+0xfa>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d009      	beq.n	8002632 <HAL_TIM_PWM_Start+0xfa>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a14      	ldr	r2, [pc, #80]	; (8002674 <HAL_TIM_PWM_Start+0x13c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_TIM_PWM_Start+0xfa>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <HAL_TIM_PWM_Start+0x140>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b06      	cmp	r3, #6
 8002642:	d010      	beq.n	8002666 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	e007      	b.n	8002666 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400
 8002678:	40000800 	.word	0x40000800

0800267c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b02      	cmp	r3, #2
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0202 	mvn.w	r2, #2
 80026a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa62 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa55 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa64 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d122      	bne.n	800272c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0204 	mvn.w	r2, #4
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa38 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa2b 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fa3a 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d122      	bne.n	8002780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b08      	cmp	r3, #8
 8002746:	d11b      	bne.n	8002780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0208 	mvn.w	r2, #8
 8002750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa0e 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa01 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fa10 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b10      	cmp	r3, #16
 800278c:	d122      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b10      	cmp	r3, #16
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0210 	mvn.w	r2, #16
 80027a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2208      	movs	r2, #8
 80027aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9e4 	bl	8002b88 <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f9d7 	bl	8002b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f9e6 	bl	8002b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0201 	mvn.w	r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f001 ff84 	bl	8004708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fdc4 	bl	80033b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f9aa 	bl	8002bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b20      	cmp	r3, #32
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0220 	mvn.w	r2, #32
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fd8f 	bl	80033a2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e0ac      	b.n	8002a00 <HAL_TIM_PWM_ConfigChannel+0x174>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	f200 809f 	bhi.w	80029f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028b6:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	080029f5 	.word	0x080029f5
 80028c4:	080029f5 	.word	0x080029f5
 80028c8:	080029f5 	.word	0x080029f5
 80028cc:	08002931 	.word	0x08002931
 80028d0:	080029f5 	.word	0x080029f5
 80028d4:	080029f5 	.word	0x080029f5
 80028d8:	080029f5 	.word	0x080029f5
 80028dc:	08002973 	.word	0x08002973
 80028e0:	080029f5 	.word	0x080029f5
 80028e4:	080029f5 	.word	0x080029f5
 80028e8:	080029f5 	.word	0x080029f5
 80028ec:	080029b3 	.word	0x080029b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f9c4 	bl	8002c84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0208 	orr.w	r2, r2, #8
 800290a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0204 	bic.w	r2, r2, #4
 800291a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6999      	ldr	r1, [r3, #24]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	619a      	str	r2, [r3, #24]
      break;
 800292e:	e062      	b.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fa0a 	bl	8002d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800295a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6999      	ldr	r1, [r3, #24]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	021a      	lsls	r2, r3, #8
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	619a      	str	r2, [r3, #24]
      break;
 8002970:	e041      	b.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fa53 	bl	8002e24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0208 	orr.w	r2, r2, #8
 800298c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0204 	bic.w	r2, r2, #4
 800299c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69d9      	ldr	r1, [r3, #28]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	61da      	str	r2, [r3, #28]
      break;
 80029b0:	e021      	b.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fa9d 	bl	8002ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69d9      	ldr	r1, [r3, #28]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	021a      	lsls	r2, r3, #8
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	61da      	str	r2, [r3, #28]
      break;
 80029f2:	e000      	b.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIM_ConfigClockSource+0x18>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0a6      	b.n	8002b6e <HAL_TIM_ConfigClockSource+0x166>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d067      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x120>
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d80b      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x6c>
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d073      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0x140>
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d802      	bhi.n	8002a6a <HAL_TIM_ConfigClockSource+0x62>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d06f      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a68:	e078      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d06c      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0x140>
 8002a6e:	2b30      	cmp	r3, #48	; 0x30
 8002a70:	d06a      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a72:	e073      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a74:	2b70      	cmp	r3, #112	; 0x70
 8002a76:	d00d      	beq.n	8002a94 <HAL_TIM_ConfigClockSource+0x8c>
 8002a78:	2b70      	cmp	r3, #112	; 0x70
 8002a7a:	d804      	bhi.n	8002a86 <HAL_TIM_ConfigClockSource+0x7e>
 8002a7c:	2b50      	cmp	r3, #80	; 0x50
 8002a7e:	d033      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0xe0>
 8002a80:	2b60      	cmp	r3, #96	; 0x60
 8002a82:	d041      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a84:	e06a      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8a:	d066      	beq.n	8002b5a <HAL_TIM_ConfigClockSource+0x152>
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a90:	d017      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a92:	e063      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f000 faed 	bl	8003082 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ab6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]
      break;
 8002ac0:	e04c      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f000 fad6 	bl	8003082 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae4:	609a      	str	r2, [r3, #8]
      break;
 8002ae6:	e039      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f000 fa4d 	bl	8002f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2150      	movs	r1, #80	; 0x50
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 faa4 	bl	800304e <TIM_ITRx_SetConfig>
      break;
 8002b06:	e029      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	461a      	mov	r2, r3
 8002b16:	f000 fa6b 	bl	8002ff0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2160      	movs	r1, #96	; 0x60
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fa94 	bl	800304e <TIM_ITRx_SetConfig>
      break;
 8002b26:	e019      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f000 fa2d 	bl	8002f94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2140      	movs	r1, #64	; 0x40
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fa84 	bl	800304e <TIM_ITRx_SetConfig>
      break;
 8002b46:	e009      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f000 fa7b 	bl	800304e <TIM_ITRx_SetConfig>
        break;
 8002b58:	e000      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
	...

08002bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <TIM_Base_SetConfig+0xb8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_Base_SetConfig+0x30>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d007      	beq.n	8002bf0 <TIM_Base_SetConfig+0x30>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <TIM_Base_SetConfig+0xbc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d003      	beq.n	8002bf0 <TIM_Base_SetConfig+0x30>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <TIM_Base_SetConfig+0xc0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d108      	bne.n	8002c02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <TIM_Base_SetConfig+0xb8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <TIM_Base_SetConfig+0x62>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c10:	d007      	beq.n	8002c22 <TIM_Base_SetConfig+0x62>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a19      	ldr	r2, [pc, #100]	; (8002c7c <TIM_Base_SetConfig+0xbc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_Base_SetConfig+0x62>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <TIM_Base_SetConfig+0xc0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d108      	bne.n	8002c34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a07      	ldr	r2, [pc, #28]	; (8002c78 <TIM_Base_SetConfig+0xb8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800

08002c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f023 0201 	bic.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 0302 	bic.w	r3, r3, #2
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <TIM_OC1_SetConfig+0xc8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10c      	bne.n	8002cfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0308 	bic.w	r3, r3, #8
 8002ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <TIM_OC1_SetConfig+0xc8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d111      	bne.n	8002d26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	621a      	str	r2, [r3, #32]
}
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40012c00 	.word	0x40012c00

08002d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0210 	bic.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0320 	bic.w	r3, r3, #32
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <TIM_OC2_SetConfig+0xd0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10d      	bne.n	8002dcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <TIM_OC2_SetConfig+0xd0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d113      	bne.n	8002dfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00

08002e24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <TIM_OC3_SetConfig+0xd0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10d      	bne.n	8002e9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <TIM_OC3_SetConfig+0xd0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d113      	bne.n	8002ece <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	621a      	str	r2, [r3, #32]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40012c00 	.word	0x40012c00

08002ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	031b      	lsls	r3, r3, #12
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <TIM_OC4_SetConfig+0x98>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d109      	bne.n	8002f6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00

08002f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0201 	bic.w	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 030a 	bic.w	r3, r3, #10
 8002fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f023 0210 	bic.w	r2, r3, #16
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800301a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	031b      	lsls	r3, r3, #12
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4313      	orrs	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800302c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	f043 0307 	orr.w	r3, r3, #7
 8003070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003082:	b480      	push	{r7}
 8003084:	b087      	sub	sp, #28
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800309c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	609a      	str	r2, [r3, #8]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2201      	movs	r2, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_TIMEx_PWMN_Start+0x24>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e022      	b.n	8003172 <HAL_TIMEx_PWMN_Start+0x6a>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d109      	bne.n	8003146 <HAL_TIMEx_PWMN_Start+0x3e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e015      	b.n	8003172 <HAL_TIMEx_PWMN_Start+0x6a>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d109      	bne.n	8003160 <HAL_TIMEx_PWMN_Start+0x58>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e008      	b.n	8003172 <HAL_TIMEx_PWMN_Start+0x6a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e059      	b.n	800322e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_TIMEx_PWMN_Start+0x82>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003188:	e013      	b.n	80031b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d104      	bne.n	800319a <HAL_TIMEx_PWMN_Start+0x92>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003198:	e00b      	b.n	80031b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d104      	bne.n	80031aa <HAL_TIMEx_PWMN_Start+0xa2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a8:	e003      	b.n	80031b2 <HAL_TIMEx_PWMN_Start+0xaa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2204      	movs	r2, #4
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f903 	bl	80033c6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <HAL_TIMEx_PWMN_Start+0x130>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00e      	beq.n	80031f8 <HAL_TIMEx_PWMN_Start+0xf0>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d009      	beq.n	80031f8 <HAL_TIMEx_PWMN_Start+0xf0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_TIMEx_PWMN_Start+0x134>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIMEx_PWMN_Start+0xf0>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_TIMEx_PWMN_Start+0x138>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d111      	bne.n	800321c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b06      	cmp	r3, #6
 8003208:	d010      	beq.n	800322c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321a:	e007      	b.n	800322c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800

08003244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003258:	2302      	movs	r3, #2
 800325a:	e046      	b.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a16      	ldr	r2, [pc, #88]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00e      	beq.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d009      	beq.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a10      	ldr	r2, [pc, #64]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10c      	bne.n	80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800

08003300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003318:	2302      	movs	r3, #2
 800331a:	e03d      	b.n	8003398 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	2204      	movs	r2, #4
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	401a      	ands	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1a      	ldr	r2, [r3, #32]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	431a      	orrs	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e03f      	b.n	80034a0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f001 faa5 	bl	8004984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2224      	movs	r2, #36	; 0x24
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fb4a 	bl	8003aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003466:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003476:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003486:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	; 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10d      	bne.n	80034fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_UART_IRQHandler+0x52>
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa51 	bl	800399a <UART_Receive_IT>
      return;
 80034f8:	e17c      	b.n	80037f4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80b1 	beq.w	8003664 <HAL_UART_IRQHandler+0x1bc>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <HAL_UART_IRQHandler+0x70>
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80a6 	beq.w	8003664 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_UART_IRQHandler+0x90>
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_UART_IRQHandler+0xb0>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0202 	orr.w	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_UART_IRQHandler+0xd0>
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00f      	beq.n	80035a2 <HAL_UART_IRQHandler+0xfa>
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <HAL_UART_IRQHandler+0xee>
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f043 0208 	orr.w	r2, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 811f 	beq.w	80037ea <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <HAL_UART_IRQHandler+0x11e>
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f9ea 	bl	800399a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_UART_IRQHandler+0x146>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d031      	beq.n	8003652 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f92c 	bl	800384c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d023      	beq.n	800364a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003610:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d013      	beq.n	8003642 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	4a77      	ldr	r2, [pc, #476]	; (80037fc <HAL_UART_IRQHandler+0x354>)
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc ff94 	bl	8000554 <HAL_DMA_Abort_IT>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800363c:	4610      	mov	r0, r2
 800363e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	e00e      	b.n	8003660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f8ee 	bl	8003824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	e00a      	b.n	8003660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8ea 	bl	8003824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	e006      	b.n	8003660 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f8e6 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800365e:	e0c4      	b.n	80037ea <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	bf00      	nop
    return;
 8003662:	e0c2      	b.n	80037ea <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	2b01      	cmp	r3, #1
 800366a:	f040 80a1 	bne.w	80037b0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 809b 	beq.w	80037b0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8095 	beq.w	80037b0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d04e      	beq.n	8003748 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80036b4:	8a3b      	ldrh	r3, [r7, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8099 	beq.w	80037ee <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036c0:	8a3a      	ldrh	r2, [r7, #16]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	f080 8093 	bcs.w	80037ee <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8a3a      	ldrh	r2, [r7, #16]
 80036cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d02b      	beq.n	8003730 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003706:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0210 	bic.w	r2, r2, #16
 8003724:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	4618      	mov	r0, r3
 800372c:	f7fc fed8 	bl	80004e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003738:	b29b      	uxth	r3, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	b29b      	uxth	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f878 	bl	8003836 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003746:	e052      	b.n	80037ee <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003750:	b29b      	uxth	r3, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d048      	beq.n	80037f2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003760:	8a7b      	ldrh	r3, [r7, #18]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d045      	beq.n	80037f2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003774:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0210 	bic.w	r2, r2, #16
 80037a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037a4:	8a7b      	ldrh	r3, [r7, #18]
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f844 	bl	8003836 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037ae:	e020      	b.n	80037f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_UART_IRQHandler+0x324>
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f881 	bl	80038cc <UART_Transmit_IT>
    return;
 80037ca:	e013      	b.n	80037f4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00e      	beq.n	80037f4 <HAL_UART_IRQHandler+0x34c>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8c2 	bl	800396a <UART_EndTransmit_IT>
    return;
 80037e6:	bf00      	nop
 80037e8:	e004      	b.n	80037f4 <HAL_UART_IRQHandler+0x34c>
    return;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <HAL_UART_IRQHandler+0x34c>
      return;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <HAL_UART_IRQHandler+0x34c>
      return;
 80037f2:	bf00      	nop
  }
}
 80037f4:	3728      	adds	r7, #40	; 0x28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	080038a5 	.word	0x080038a5

08003800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	460b      	mov	r3, r1
 8003840:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003862:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0210 	bic.w	r2, r2, #16
 800388a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff ffb0 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b21      	cmp	r3, #33	; 0x21
 80038de:	d13e      	bne.n	800395e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d114      	bne.n	8003914 <UART_Transmit_IT+0x48>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d110      	bne.n	8003914 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003906:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	1c9a      	adds	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	621a      	str	r2, [r3, #32]
 8003912:	e008      	b.n	8003926 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	1c59      	adds	r1, r3, #1
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6211      	str	r1, [r2, #32]
 800391e:	781a      	ldrb	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29b      	uxth	r3, r3
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4619      	mov	r1, r3
 8003934:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003948:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003958:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ff38 	bl	8003800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b22      	cmp	r3, #34	; 0x22
 80039ac:	f040 8099 	bne.w	8003ae2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d117      	bne.n	80039ea <UART_Receive_IT+0x50>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d113      	bne.n	80039ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	b29a      	uxth	r2, r3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
 80039e8:	e026      	b.n	8003a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fc:	d007      	beq.n	8003a0e <UART_Receive_IT+0x74>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <UART_Receive_IT+0x82>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e008      	b.n	8003a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d148      	bne.n	8003ade <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0220 	bic.w	r2, r2, #32
 8003a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d123      	bne.n	8003ad4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0210 	bic.w	r2, r2, #16
 8003aa0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d10a      	bne.n	8003ac6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff feb2 	bl	8003836 <HAL_UARTEx_RxEventCallback>
 8003ad2:	e002      	b.n	8003ada <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fe9c 	bl	8003812 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e002      	b.n	8003ae4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b26:	f023 030c 	bic.w	r3, r3, #12
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2c      	ldr	r2, [pc, #176]	; (8003c00 <UART_SetConfig+0x114>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d103      	bne.n	8003b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe fbc4 	bl	80022e0 <HAL_RCC_GetPCLK2Freq>
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	e002      	b.n	8003b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7fe fbac 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 8003b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <UART_SetConfig+0x118>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	0119      	lsls	r1, r3, #4
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009a      	lsls	r2, r3, #2
 8003b8c:	441a      	add	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <UART_SetConfig+0x118>)
 8003b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2064      	movs	r0, #100	; 0x64
 8003ba2:	fb00 f303 	mul.w	r3, r0, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	3332      	adds	r3, #50	; 0x32
 8003bac:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <UART_SetConfig+0x118>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb8:	4419      	add	r1, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <UART_SetConfig+0x118>)
 8003bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2064      	movs	r0, #100	; 0x64
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <UART_SetConfig+0x118>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40013800 	.word	0x40013800
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <AS5600_Init>:
AS5600_TypeDef *AS5600_New(void) {
    AS5600_TypeDef *a = (AS5600_TypeDef *)calloc(1, sizeof(AS5600_TypeDef));
    return a;
}

HAL_StatusTypeDef AS5600_Init(AS5600_TypeDef *a) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af04      	add	r7, sp, #16
 8003c0e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73bb      	strb	r3, [r7, #14]
    uint8_t pwm = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
    uint8_t mag_status = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	737b      	strb	r3, [r7, #13]
    /* Set configuration defaults for uninitialized values. */
    if (!(a->PositiveRotationDirection)) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7b9b      	ldrb	r3, [r3, #14]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <AS5600_Init+0x22>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	739a      	strb	r2, [r3, #14]
    }
    if (!(a->LowPowerMode)) {
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7bdb      	ldrb	r3, [r3, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <AS5600_Init+0x30>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	73da      	strb	r2, [r3, #15]
    }
    if (!(a->Hysteresis)) {
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7c1b      	ldrb	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <AS5600_Init+0x3e>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	741a      	strb	r2, [r3, #16]
    }
    if (!(a->OutputMode)) {
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7c5b      	ldrb	r3, [r3, #17]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <AS5600_Init+0x4c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	745a      	strb	r2, [r3, #17]
    }
    if (!(a->PWMFrequency)) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7c9b      	ldrb	r3, [r3, #18]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <AS5600_Init+0x5a>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	749a      	strb	r2, [r3, #18]
    }
    if (!(a->SlowFilter)) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	7cdb      	ldrb	r3, [r3, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <AS5600_Init+0x68>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	74da      	strb	r2, [r3, #19]
    }
    if (!(a->FastFilterThreshold)) {
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	7d1b      	ldrb	r3, [r3, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <AS5600_Init+0x76>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	751a      	strb	r2, [r3, #20]
    }
    if (!(a->WatchdogTimer)) {
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7d5b      	ldrb	r3, [r3, #21]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <AS5600_Init+0x84>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	755a      	strb	r2, [r3, #21]
    }
    /* Write configuration settings.
       Do this in single write instead of using functions below to avoid
       overhead of multiple calls to HAL_I2C_Mem_Write */
    switch (a->LowPowerMode) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7bdb      	ldrb	r3, [r3, #15]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d83e      	bhi.n	8003d14 <AS5600_Init+0x10c>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <AS5600_Init+0x94>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cbf 	.word	0x08003cbf
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003d03 	.word	0x08003d03
        case AS5600_POWER_MODE_NOM:
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7ddb      	ldrb	r3, [r3, #23]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	75da      	strb	r2, [r3, #23]
            break;
 8003cbc:	e02e      	b.n	8003d1c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM1:
            a->confRegister[1] |= (1UL << 0);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	7ddb      	ldrb	r3, [r3, #23]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7ddb      	ldrb	r3, [r3, #23]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f023 0302 	bic.w	r3, r3, #2
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	75da      	strb	r2, [r3, #23]
            break;
 8003cde:	e01d      	b.n	8003d1c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM2:
            a->confRegister[1] |= (1UL << 1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7ddb      	ldrb	r3, [r3, #23]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= (1UL << 0);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	7ddb      	ldrb	r3, [r3, #23]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	75da      	strb	r2, [r3, #23]
            break;
 8003d00:	e00c      	b.n	8003d1c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM3:
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7ddb      	ldrb	r3, [r3, #23]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0303 	orr.w	r3, r3, #3
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	75da      	strb	r2, [r3, #23]
            break;
 8003d12:	e003      	b.n	8003d1c <AS5600_Init+0x114>
        default:
            /* Invalid low power mode specified */
            status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73bb      	strb	r3, [r7, #14]
            return status;
 8003d18:	7bbb      	ldrb	r3, [r7, #14]
 8003d1a:	e208      	b.n	800412e <AS5600_Init+0x526>
    }
    switch (a->Hysteresis) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7c1b      	ldrb	r3, [r3, #16]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d83e      	bhi.n	8003da4 <AS5600_Init+0x19c>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <AS5600_Init+0x124>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d4f 	.word	0x08003d4f
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d93 	.word	0x08003d93
        case AS5600_HYSTERESIS_OFF:
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	7ddb      	ldrb	r3, [r3, #23]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f023 030c 	bic.w	r3, r3, #12
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	75da      	strb	r2, [r3, #23]
            break;
 8003d4c:	e02e      	b.n	8003dac <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_1LSB:
            a->confRegister[1] |= (1UL << 2);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7ddb      	ldrb	r3, [r3, #23]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 3);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7ddb      	ldrb	r3, [r3, #23]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f023 0308 	bic.w	r3, r3, #8
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	75da      	strb	r2, [r3, #23]
            break;
 8003d6e:	e01d      	b.n	8003dac <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_2LSB:
            a->confRegister[1] &= ~(1UL << 2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7ddb      	ldrb	r3, [r3, #23]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f023 0304 	bic.w	r3, r3, #4
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7ddb      	ldrb	r3, [r3, #23]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f043 0308 	orr.w	r3, r3, #8
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	75da      	strb	r2, [r3, #23]
            break;
 8003d90:	e00c      	b.n	8003dac <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_3LSB:
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7ddb      	ldrb	r3, [r3, #23]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f043 030c 	orr.w	r3, r3, #12
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	75da      	strb	r2, [r3, #23]
            break;
 8003da2:	e003      	b.n	8003dac <AS5600_Init+0x1a4>
        default:
            /* Invalid hysteresis mode specified */
            status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73bb      	strb	r3, [r7, #14]
            return status;
 8003da8:	7bbb      	ldrb	r3, [r7, #14]
 8003daa:	e1c0      	b.n	800412e <AS5600_Init+0x526>
    }
    switch (a->OutputMode) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	7c5b      	ldrb	r3, [r3, #17]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d00c      	beq.n	8003dce <AS5600_Init+0x1c6>
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d01b      	beq.n	8003df0 <AS5600_Init+0x1e8>
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d12c      	bne.n	8003e16 <AS5600_Init+0x20e>
        case AS5600_OUTPUT_STAGE_FULL:
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7ddb      	ldrb	r3, [r3, #23]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	75da      	strb	r2, [r3, #23]
            break;
 8003dcc:	e027      	b.n	8003e1e <AS5600_Init+0x216>
        case AS5600_OUTPUT_STAGE_REDUCED:
            a->confRegister[1] |= (1UL << 4);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	7ddb      	ldrb	r3, [r3, #23]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f043 0310 	orr.w	r3, r3, #16
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 5);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7ddb      	ldrb	r3, [r3, #23]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f023 0320 	bic.w	r3, r3, #32
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	75da      	strb	r2, [r3, #23]
            break;
 8003dee:	e016      	b.n	8003e1e <AS5600_Init+0x216>
        case AS5600_OUTPUT_STAGE_PWM:
            a->confRegister[1] &= (1UL << 4);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	7ddb      	ldrb	r3, [r3, #23]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 5);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7ddb      	ldrb	r3, [r3, #23]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0320 	orr.w	r3, r3, #32
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	75da      	strb	r2, [r3, #23]
            pwm = 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
            break;
 8003e14:	e003      	b.n	8003e1e <AS5600_Init+0x216>
        default:
            /* Invalid output mode specified */
            status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73bb      	strb	r3, [r7, #14]
            return status;
 8003e1a:	7bbb      	ldrb	r3, [r7, #14]
 8003e1c:	e187      	b.n	800412e <AS5600_Init+0x526>
    }
    if (pwm) {
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d047      	beq.n	8003eb4 <AS5600_Init+0x2ac>
        switch (a->PWMFrequency) {
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7c9b      	ldrb	r3, [r3, #18]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d83e      	bhi.n	8003eac <AS5600_Init+0x2a4>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <AS5600_Init+0x22c>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003e45 	.word	0x08003e45
 8003e38:	08003e57 	.word	0x08003e57
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e9b 	.word	0x08003e9b
            case AS5600_PWM_FREQUENCY_115HZ:
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7ddb      	ldrb	r3, [r3, #23]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	75da      	strb	r2, [r3, #23]
                break;
 8003e54:	e02f      	b.n	8003eb6 <AS5600_Init+0x2ae>
            case AS5600_PWM_FREQUENCY_230HZ:
                a->confRegister[1] |= (1UL << 6);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7ddb      	ldrb	r3, [r3, #23]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] &= ~(1UL << 7);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	7ddb      	ldrb	r3, [r3, #23]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	75da      	strb	r2, [r3, #23]
                break;
 8003e76:	e01e      	b.n	8003eb6 <AS5600_Init+0x2ae>
            case AS5600_PWM_FREQUENCY_460HZ:
                a->confRegister[1] &= ~(1UL << 6);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7ddb      	ldrb	r3, [r3, #23]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] |= (1UL << 7);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7ddb      	ldrb	r3, [r3, #23]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	75da      	strb	r2, [r3, #23]
                break;
 8003e98:	e00d      	b.n	8003eb6 <AS5600_Init+0x2ae>
            case AS5600_PWM_FREQUENCY_920HZ:
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7ddb      	ldrb	r3, [r3, #23]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	75da      	strb	r2, [r3, #23]
                break;
 8003eaa:	e004      	b.n	8003eb6 <AS5600_Init+0x2ae>
            default:
                /* Invalid PWM frequency specified. */
                status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73bb      	strb	r3, [r7, #14]
                return status;
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	e13c      	b.n	800412e <AS5600_Init+0x526>
        }
    }
 8003eb4:	bf00      	nop
    switch (a->SlowFilter) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7cdb      	ldrb	r3, [r3, #19]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d83f      	bhi.n	8003f40 <AS5600_Init+0x338>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <AS5600_Init+0x2c0>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003eeb 	.word	0x08003eeb
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f2f 	.word	0x08003f2f
        case AS5600_SLOW_FILTER_16X:
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7d9b      	ldrb	r3, [r3, #22]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	759a      	strb	r2, [r3, #22]
            break;
 8003ee8:	e02e      	b.n	8003f48 <AS5600_Init+0x340>
        case AS5600_SLOW_FILTER_8X:
            a->confRegister[0] |= (1UL << 0);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7d9b      	ldrb	r3, [r3, #22]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] &= ~(1UL << 1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7d9b      	ldrb	r3, [r3, #22]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f023 0302 	bic.w	r3, r3, #2
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	759a      	strb	r2, [r3, #22]
            break;
 8003f0a:	e01d      	b.n	8003f48 <AS5600_Init+0x340>
        case AS5600_SLOW_FILTER_4X:
            a->confRegister[0] &= ~(1UL << 0);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	7d9b      	ldrb	r3, [r3, #22]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7d9b      	ldrb	r3, [r3, #22]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	759a      	strb	r2, [r3, #22]
            break;
 8003f2c:	e00c      	b.n	8003f48 <AS5600_Init+0x340>
        case AS5600_SLOW_FILTER_2X:
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7d9b      	ldrb	r3, [r3, #22]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f043 0303 	orr.w	r3, r3, #3
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	759a      	strb	r2, [r3, #22]
            break;
 8003f3e:	e003      	b.n	8003f48 <AS5600_Init+0x340>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73bb      	strb	r3, [r7, #14]
            return status;
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	e0f2      	b.n	800412e <AS5600_Init+0x526>
    }
    switch (a->FastFilterThreshold) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7d1b      	ldrb	r3, [r3, #20]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	2b07      	cmp	r3, #7
 8003f50:	f200 808c 	bhi.w	800406c <AS5600_Init+0x464>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <AS5600_Init+0x354>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f7d 	.word	0x08003f7d
 8003f60:	08003f8f 	.word	0x08003f8f
 8003f64:	08003fb1 	.word	0x08003fb1
 8003f68:	08003fd3 	.word	0x08003fd3
 8003f6c:	08003ff5 	.word	0x08003ff5
 8003f70:	08004017 	.word	0x08004017
 8003f74:	08004039 	.word	0x08004039
 8003f78:	0800405b 	.word	0x0800405b
        case AS5600_FAST_FILTER_SLOW_ONLY:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7d9b      	ldrb	r3, [r3, #22]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f023 031c 	bic.w	r3, r3, #28
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	759a      	strb	r2, [r3, #22]
            break;
 8003f8c:	e072      	b.n	8004074 <AS5600_Init+0x46c>
        case AS5600_FAST_FILTER_6LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	7d9b      	ldrb	r3, [r3, #22]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f023 0318 	bic.w	r3, r3, #24
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 2);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	7d9b      	ldrb	r3, [r3, #22]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f043 0304 	orr.w	r3, r3, #4
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	759a      	strb	r2, [r3, #22]
            break;
 8003fae:	e061      	b.n	8004074 <AS5600_Init+0x46c>
        case AS5600_FAST_FILTER_7LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7d9b      	ldrb	r3, [r3, #22]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f023 0314 	bic.w	r3, r3, #20
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 3);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	7d9b      	ldrb	r3, [r3, #22]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f043 0308 	orr.w	r3, r3, #8
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	759a      	strb	r2, [r3, #22]
            break;
 8003fd0:	e050      	b.n	8004074 <AS5600_Init+0x46c>
        case AS5600_FAST_FILTER_9LSB:
            a->confRegister[0] &= ~(1UL << 4);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7d9b      	ldrb	r3, [r3, #22]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f023 0310 	bic.w	r3, r3, #16
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7d9b      	ldrb	r3, [r3, #22]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f043 030c 	orr.w	r3, r3, #12
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	759a      	strb	r2, [r3, #22]
            break;
 8003ff2:	e03f      	b.n	8004074 <AS5600_Init+0x46c>
        case AS5600_FAST_FILTER_18LSB:
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	7d9b      	ldrb	r3, [r3, #22]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f023 030c 	bic.w	r3, r3, #12
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 4);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7d9b      	ldrb	r3, [r3, #22]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f043 0310 	orr.w	r3, r3, #16
 800400e:	b2da      	uxtb	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	759a      	strb	r2, [r3, #22]
            break;
 8004014:	e02e      	b.n	8004074 <AS5600_Init+0x46c>
        case AS5600_FAST_FILTER_21LSB:
            a->confRegister[0] &= ~(1UL << 3);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7d9b      	ldrb	r3, [r3, #22]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f023 0308 	bic.w	r3, r3, #8
 8004020:	b2da      	uxtb	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7d9b      	ldrb	r3, [r3, #22]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f043 0314 	orr.w	r3, r3, #20
 8004030:	b2da      	uxtb	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	759a      	strb	r2, [r3, #22]
            break;
 8004036:	e01d      	b.n	8004074 <AS5600_Init+0x46c>
        case AS5600_FAST_FILTER_24LSB:
            a->confRegister[0] &= ~(1UL << 2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7d9b      	ldrb	r3, [r3, #22]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f023 0304 	bic.w	r3, r3, #4
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7d9b      	ldrb	r3, [r3, #22]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0318 	orr.w	r3, r3, #24
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	759a      	strb	r2, [r3, #22]
            break;
 8004058:	e00c      	b.n	8004074 <AS5600_Init+0x46c>
        case AS5600_FAST_FILTER_10LSB:
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	7d9b      	ldrb	r3, [r3, #22]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f043 031c 	orr.w	r3, r3, #28
 8004064:	b2da      	uxtb	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	759a      	strb	r2, [r3, #22]
            break;
 800406a:	e003      	b.n	8004074 <AS5600_Init+0x46c>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73bb      	strb	r3, [r7, #14]
            return status;
 8004070:	7bbb      	ldrb	r3, [r7, #14]
 8004072:	e05c      	b.n	800412e <AS5600_Init+0x526>
    }
    switch (a->WatchdogTimer) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7d5b      	ldrb	r3, [r3, #21]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <AS5600_Init+0x47a>
 800407c:	2b02      	cmp	r3, #2
 800407e:	d009      	beq.n	8004094 <AS5600_Init+0x48c>
 8004080:	e011      	b.n	80040a6 <AS5600_Init+0x49e>
        case AS5600_WATCHDOG_OFF:
            a->confRegister[0] &= ~(1UL << 6);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7d9b      	ldrb	r3, [r3, #22]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408c:	b2da      	uxtb	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	759a      	strb	r2, [r3, #22]
            break;
 8004092:	e00c      	b.n	80040ae <AS5600_Init+0x4a6>
        case AS5600_WATCHDOG_ON:
            a->confRegister[0] |= (1UL << 6);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7d9b      	ldrb	r3, [r3, #22]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	759a      	strb	r2, [r3, #22]
            break;
 80040a4:	e003      	b.n	80040ae <AS5600_Init+0x4a6>
        default:
            /* Invalid watchdog state specified */
            status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73bb      	strb	r3, [r7, #14]
            return status;
 80040aa:	7bbb      	ldrb	r3, [r7, #14]
 80040ac:	e03f      	b.n	800412e <AS5600_Init+0x526>
    }
    if (HAL_I2C_Mem_Write(a->i2cHandle, a->i2cAddr,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	791b      	ldrb	r3, [r3, #4]
 80040b6:	b299      	uxth	r1, r3
                             AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT,
                             a->confRegister, 2, I2C_DELAY) != HAL_OK) {
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3316      	adds	r3, #22
    if (HAL_I2C_Mem_Write(a->i2cHandle, a->i2cAddr,
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <AS5600_Init+0x530>)
 80040be:	9202      	str	r2, [sp, #8]
 80040c0:	2202      	movs	r2, #2
 80040c2:	9201      	str	r2, [sp, #4]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2301      	movs	r3, #1
 80040c8:	2207      	movs	r2, #7
 80040ca:	f7fc fe69 	bl	8000da0 <HAL_I2C_Mem_Write>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <AS5600_Init+0x4d4>
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73bb      	strb	r3, [r7, #14]
        return status;
 80040d8:	7bbb      	ldrb	r3, [r7, #14]
 80040da:	e028      	b.n	800412e <AS5600_Init+0x526>
    }
    /* Check magnet status */
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 80040dc:	f107 030d 	add.w	r3, r7, #13
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f85a 	bl	800419c <AS5600_GetMagnetStatus>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <AS5600_Init+0x4ee>
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73bb      	strb	r3, [r7, #14]
        return status;
 80040f2:	7bbb      	ldrb	r3, [r7, #14]
 80040f4:	e01b      	b.n	800412e <AS5600_Init+0x526>
    }
    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 80040f6:	7b7b      	ldrb	r3, [r7, #13]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <AS5600_Init+0x500>
        /* Magnet not detected */
        status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73bb      	strb	r3, [r7, #14]
        return status;
 8004104:	7bbb      	ldrb	r3, [r7, #14]
 8004106:	e012      	b.n	800412e <AS5600_Init+0x526>
    }
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 8004108:	7b7b      	ldrb	r3, [r7, #13]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <AS5600_Init+0x512>
        /* B-field is too strong */
        status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73bb      	strb	r3, [r7, #14]
        return status;
 8004116:	7bbb      	ldrb	r3, [r7, #14]
 8004118:	e009      	b.n	800412e <AS5600_Init+0x526>
    }
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 800411a:	7b7b      	ldrb	r3, [r7, #13]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <AS5600_Init+0x524>
        /* B-field is too weak */
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73bb      	strb	r3, [r7, #14]
        return status;
 8004128:	7bbb      	ldrb	r3, [r7, #14]
 800412a:	e000      	b.n	800412e <AS5600_Init+0x526>
    }
    /* Write */

    return status;
 800412c:	7bbb      	ldrb	r3, [r7, #14]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	0007a120 	.word	0x0007a120

0800413c <AS5600_GetRawAngle>:

    return status;
}

HAL_StatusTypeDef AS5600_GetRawAngle(AS5600_TypeDef *const a,
                                     uint16_t *const angle) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af04      	add	r7, sp, #16
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0};
 800414a:	2300      	movs	r3, #0
 800414c:	81bb      	strh	r3, [r7, #12]
    if (HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	791b      	ldrb	r3, [r3, #4]
 8004156:	b299      	uxth	r1, r3
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <AS5600_GetRawAngle+0x5c>)
 800415a:	9302      	str	r3, [sp, #8]
 800415c:	2302      	movs	r3, #2
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2301      	movs	r3, #1
 8004168:	220c      	movs	r2, #12
 800416a:	f7fc ff13 	bl	8000f94 <HAL_I2C_Mem_Read>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <AS5600_GetRawAngle+0x3c>
                            AS5600_REGISTER_RAW_ANGLE_HIGH,
                            I2C_MEMADD_SIZE_8BIT, data, 2, I2C_DELAY) != HAL_OK) {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
    }
    *angle = ((data[0] << 8) | data[1]);
 8004178:	7b3b      	ldrb	r3, [r7, #12]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	b21a      	sxth	r2, r3
 800417e:	7b7b      	ldrb	r3, [r7, #13]
 8004180:	b21b      	sxth	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b21b      	sxth	r3, r3
 8004186:	b29a      	uxth	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	801a      	strh	r2, [r3, #0]
    return status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	0007a120 	.word	0x0007a120

0800419c <AS5600_GetMagnetStatus>:

    return status;
}

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a,
                                         uint8_t *const stat) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af04      	add	r7, sp, #16
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	b299      	uxth	r1, r3
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <AS5600_GetMagnetStatus+0x40>)
 80041b6:	9302      	str	r3, [sp, #8]
 80041b8:	2301      	movs	r3, #1
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2301      	movs	r3, #1
 80041c2:	220b      	movs	r2, #11
 80041c4:	f7fc fee6 	bl	8000f94 <HAL_I2C_Mem_Read>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <AS5600_GetMagnetStatus+0x36>
                            I2C_MEMADD_SIZE_8BIT, stat, 1, I2C_DELAY) != HAL_OK) {
        status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	0007a120 	.word	0x0007a120

080041e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e2:	b0a3      	sub	sp, #140	; 0x8c
 80041e4:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE BEGIN 1 */
  hAS5600.i2cHandle = &hi2c2;
 80041e6:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <main+0xd4>)
 80041e8:	4a33      	ldr	r2, [pc, #204]	; (80042b8 <main+0xd8>)
 80041ea:	601a      	str	r2, [r3, #0]
  hAS5600.i2cAddr = 0x36<<1;
 80041ec:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <main+0xd4>)
 80041ee:	226c      	movs	r2, #108	; 0x6c
 80041f0:	711a      	strb	r2, [r3, #4]
  uint16_t raw_angle = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	80fb      	strh	r3, [r7, #6]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041f6:	f7fb ffa9 	bl	800014c <HAL_Init>

  /* USER CODE BEGIN Init */
  MOTOR_init(htim1, huart2);
 80041fa:	4e30      	ldr	r6, [pc, #192]	; (80042bc <main+0xdc>)
 80041fc:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <main+0xe0>)
 80041fe:	ab0e      	add	r3, sp, #56	; 0x38
 8004200:	4611      	mov	r1, r2
 8004202:	2244      	movs	r2, #68	; 0x44
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fcd3 	bl	8004bb0 <memcpy>
 800420a:	466d      	mov	r5, sp
 800420c:	f106 0410 	add.w	r4, r6, #16
 8004210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800421a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800421c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004220:	e885 0003 	stmia.w	r5, {r0, r1}
 8004224:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004228:	f000 fa7e 	bl	8004728 <MOTOR_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800422c:	f000 f84e 	bl	80042cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004230:	f000 fa12 	bl	8004658 <MX_GPIO_Init>
  MX_DMA_Init();
 8004234:	f000 f9f2 	bl	800461c <MX_DMA_Init>
  MX_TIM1_Init();
 8004238:	f000 f8bc 	bl	80043b4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800423c:	f000 f978 	bl	8004530 <MX_TIM2_Init>
  MX_I2C2_Init();
 8004240:	f000 f88a 	bl	8004358 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8004244:	f000 f9c0 	bl	80045c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 // HAL_TIM_Base_Start_IT( &htim1 );
  AS5600_Init(&hAS5600);
 8004248:	481a      	ldr	r0, [pc, #104]	; (80042b4 <main+0xd4>)
 800424a:	f7ff fcdd 	bl	8003c08 <AS5600_Init>
    __HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, 512 );
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <main+0xdc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004256:	635a      	str	r2, [r3, #52]	; 0x34
  	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, 512 );
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <main+0xdc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
  	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, 512 );
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <main+0xdc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 800426c:	2100      	movs	r1, #0
 800426e:	4813      	ldr	r0, [pc, #76]	; (80042bc <main+0xdc>)
 8004270:	f7fe f962 	bl	8002538 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8004274:	2104      	movs	r1, #4
 8004276:	4811      	ldr	r0, [pc, #68]	; (80042bc <main+0xdc>)
 8004278:	f7fe f95e 	bl	8002538 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 800427c:	2108      	movs	r1, #8
 800427e:	480f      	ldr	r0, [pc, #60]	; (80042bc <main+0xdc>)
 8004280:	f7fe f95a 	bl	8002538 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 8004284:	2100      	movs	r1, #0
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <main+0xdc>)
 8004288:	f7fe ff3e 	bl	8003108 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 800428c:	2104      	movs	r1, #4
 800428e:	480b      	ldr	r0, [pc, #44]	; (80042bc <main+0xdc>)
 8004290:	f7fe ff3a 	bl	8003108 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 8004294:	2108      	movs	r1, #8
 8004296:	4809      	ldr	r0, [pc, #36]	; (80042bc <main+0xdc>)
 8004298:	f7fe ff36 	bl	8003108 <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Base_Start_IT(&htim2);
 800429c:	4809      	ldr	r0, [pc, #36]	; (80042c4 <main+0xe4>)
 800429e:	f7fe f8a1 	bl	80023e4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    //__disable_irq();
  while (1)
  {
	  AS5600_GetRawAngle(&hAS5600, &raw_angle);
 80042a2:	1dbb      	adds	r3, r7, #6
 80042a4:	4619      	mov	r1, r3
 80042a6:	4803      	ldr	r0, [pc, #12]	; (80042b4 <main+0xd4>)
 80042a8:	f7ff ff48 	bl	800413c <AS5600_GetRawAngle>

	  as5600_angle = raw_angle;
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <main+0xe8>)
 80042b0:	801a      	strh	r2, [r3, #0]
	  AS5600_GetRawAngle(&hAS5600, &raw_angle);
 80042b2:	e7f6      	b.n	80042a2 <main+0xc2>
 80042b4:	2000019c 	.word	0x2000019c
 80042b8:	20000030 	.word	0x20000030
 80042bc:	200000c8 	.word	0x200000c8
 80042c0:	20000158 	.word	0x20000158
 80042c4:	20000110 	.word	0x20000110
 80042c8:	20000028 	.word	0x20000028

080042cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b090      	sub	sp, #64	; 0x40
 80042d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042d2:	f107 0318 	add.w	r3, r7, #24
 80042d6:	2228      	movs	r2, #40	; 0x28
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fc73 	bl	8004bc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042e0:	1d3b      	adds	r3, r7, #4
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	60da      	str	r2, [r3, #12]
 80042ec:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042ee:	2301      	movs	r3, #1
 80042f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042fc:	2301      	movs	r3, #1
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004300:	2302      	movs	r3, #2
 8004302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800430a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004310:	f107 0318 	add.w	r3, r7, #24
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fbf9 	bl	8001b0c <HAL_RCC_OscConfig>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004320:	f000 f9fb 	bl	800471a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004324:	230f      	movs	r3, #15
 8004326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004328:	2302      	movs	r3, #2
 800432a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd fe64 	bl	800200c <HAL_RCC_ClockConfig>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800434a:	f000 f9e6 	bl	800471a <Error_Handler>
  }
}
 800434e:	bf00      	nop
 8004350:	3740      	adds	r7, #64	; 0x40
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <MX_I2C2_Init+0x50>)
 800435e:	4a13      	ldr	r2, [pc, #76]	; (80043ac <MX_I2C2_Init+0x54>)
 8004360:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004362:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <MX_I2C2_Init+0x50>)
 8004364:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <MX_I2C2_Init+0x58>)
 8004366:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <MX_I2C2_Init+0x50>)
 800436a:	2200      	movs	r2, #0
 800436c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <MX_I2C2_Init+0x50>)
 8004370:	2200      	movs	r2, #0
 8004372:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <MX_I2C2_Init+0x50>)
 8004376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800437a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <MX_I2C2_Init+0x50>)
 800437e:	2200      	movs	r2, #0
 8004380:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <MX_I2C2_Init+0x50>)
 8004384:	2200      	movs	r2, #0
 8004386:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <MX_I2C2_Init+0x50>)
 800438a:	2200      	movs	r2, #0
 800438c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <MX_I2C2_Init+0x50>)
 8004390:	2200      	movs	r2, #0
 8004392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004394:	4804      	ldr	r0, [pc, #16]	; (80043a8 <MX_I2C2_Init+0x50>)
 8004396:	f7fc fbcb 	bl	8000b30 <HAL_I2C_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80043a0:	f000 f9bb 	bl	800471a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80043a4:	bf00      	nop
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000030 	.word	0x20000030
 80043ac:	40005800 	.word	0x40005800
 80043b0:	00061a80 	.word	0x00061a80

080043b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b096      	sub	sp, #88	; 0x58
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	611a      	str	r2, [r3, #16]
 80043e2:	615a      	str	r2, [r3, #20]
 80043e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	2220      	movs	r2, #32
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fbea 	bl	8004bc6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043f2:	4b4d      	ldr	r3, [pc, #308]	; (8004528 <MX_TIM1_Init+0x174>)
 80043f4:	4a4d      	ldr	r2, [pc, #308]	; (800452c <MX_TIM1_Init+0x178>)
 80043f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80043f8:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <MX_TIM1_Init+0x174>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80043fe:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <MX_TIM1_Init+0x174>)
 8004400:	2260      	movs	r2, #96	; 0x60
 8004402:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8004404:	4b48      	ldr	r3, [pc, #288]	; (8004528 <MX_TIM1_Init+0x174>)
 8004406:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800440a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800440c:	4b46      	ldr	r3, [pc, #280]	; (8004528 <MX_TIM1_Init+0x174>)
 800440e:	2200      	movs	r2, #0
 8004410:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004412:	4b45      	ldr	r3, [pc, #276]	; (8004528 <MX_TIM1_Init+0x174>)
 8004414:	2200      	movs	r2, #0
 8004416:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <MX_TIM1_Init+0x174>)
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800441e:	4842      	ldr	r0, [pc, #264]	; (8004528 <MX_TIM1_Init+0x174>)
 8004420:	f7fd ff90 	bl	8002344 <HAL_TIM_Base_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800442a:	f000 f976 	bl	800471a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800442e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004432:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004438:	4619      	mov	r1, r3
 800443a:	483b      	ldr	r0, [pc, #236]	; (8004528 <MX_TIM1_Init+0x174>)
 800443c:	f7fe fae4 	bl	8002a08 <HAL_TIM_ConfigClockSource>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004446:	f000 f968 	bl	800471a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800444a:	4837      	ldr	r0, [pc, #220]	; (8004528 <MX_TIM1_Init+0x174>)
 800444c:	f7fe f81c 	bl	8002488 <HAL_TIM_PWM_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004456:	f000 f960 	bl	800471a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800445a:	2300      	movs	r3, #0
 800445c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800445e:	2300      	movs	r3, #0
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004462:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004466:	4619      	mov	r1, r3
 8004468:	482f      	ldr	r0, [pc, #188]	; (8004528 <MX_TIM1_Init+0x174>)
 800446a:	f7fe feeb 	bl	8003244 <HAL_TIMEx_MasterConfigSynchronization>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004474:	f000 f951 	bl	800471a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004478:	2360      	movs	r3, #96	; 0x60
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 128;
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004480:	2300      	movs	r3, #0
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004484:	2300      	movs	r3, #0
 8004486:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800448c:	2300      	movs	r3, #0
 800448e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004490:	2300      	movs	r3, #0
 8004492:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004498:	2200      	movs	r2, #0
 800449a:	4619      	mov	r1, r3
 800449c:	4822      	ldr	r0, [pc, #136]	; (8004528 <MX_TIM1_Init+0x174>)
 800449e:	f7fe f9f5 	bl	800288c <HAL_TIM_PWM_ConfigChannel>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80044a8:	f000 f937 	bl	800471a <Error_Handler>
  }
  sConfigOC.Pulse = 256;
 80044ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80044b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b6:	2204      	movs	r2, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	481b      	ldr	r0, [pc, #108]	; (8004528 <MX_TIM1_Init+0x174>)
 80044bc:	f7fe f9e6 	bl	800288c <HAL_TIM_PWM_ConfigChannel>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80044c6:	f000 f928 	bl	800471a <Error_Handler>
  }
  sConfigOC.Pulse = 768;
 80044ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d4:	2208      	movs	r2, #8
 80044d6:	4619      	mov	r1, r3
 80044d8:	4813      	ldr	r0, [pc, #76]	; (8004528 <MX_TIM1_Init+0x174>)
 80044da:	f7fe f9d7 	bl	800288c <HAL_TIM_PWM_ConfigChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80044e4:	f000 f919 	bl	800471a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 80044f4:	2314      	movs	r3, #20
 80044f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004500:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004502:	2300      	movs	r3, #0
 8004504:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004506:	1d3b      	adds	r3, r7, #4
 8004508:	4619      	mov	r1, r3
 800450a:	4807      	ldr	r0, [pc, #28]	; (8004528 <MX_TIM1_Init+0x174>)
 800450c:	f7fe fef8 	bl	8003300 <HAL_TIMEx_ConfigBreakDeadTime>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8004516:	f000 f900 	bl	800471a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800451a:	4803      	ldr	r0, [pc, #12]	; (8004528 <MX_TIM1_Init+0x174>)
 800451c:	f000 f9d0 	bl	80048c0 <HAL_TIM_MspPostInit>

}
 8004520:	bf00      	nop
 8004522:	3758      	adds	r7, #88	; 0x58
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	200000c8 	.word	0x200000c8
 800452c:	40012c00 	.word	0x40012c00

08004530 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004536:	f107 0308 	add.w	r3, r7, #8
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004544:	463b      	mov	r3, r7
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <MX_TIM2_Init+0x94>)
 800454e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004552:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <MX_TIM2_Init+0x94>)
 8004556:	2205      	movs	r2, #5
 8004558:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <MX_TIM2_Init+0x94>)
 800455c:	2200      	movs	r2, #0
 800455e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8004560:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <MX_TIM2_Init+0x94>)
 8004562:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004566:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <MX_TIM2_Init+0x94>)
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <MX_TIM2_Init+0x94>)
 8004570:	2200      	movs	r2, #0
 8004572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004574:	4813      	ldr	r0, [pc, #76]	; (80045c4 <MX_TIM2_Init+0x94>)
 8004576:	f7fd fee5 	bl	8002344 <HAL_TIM_Base_Init>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004580:	f000 f8cb 	bl	800471a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800458a:	f107 0308 	add.w	r3, r7, #8
 800458e:	4619      	mov	r1, r3
 8004590:	480c      	ldr	r0, [pc, #48]	; (80045c4 <MX_TIM2_Init+0x94>)
 8004592:	f7fe fa39 	bl	8002a08 <HAL_TIM_ConfigClockSource>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800459c:	f000 f8bd 	bl	800471a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045a0:	2300      	movs	r3, #0
 80045a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045a8:	463b      	mov	r3, r7
 80045aa:	4619      	mov	r1, r3
 80045ac:	4805      	ldr	r0, [pc, #20]	; (80045c4 <MX_TIM2_Init+0x94>)
 80045ae:	f7fe fe49 	bl	8003244 <HAL_TIMEx_MasterConfigSynchronization>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80045b8:	f000 f8af 	bl	800471a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80045bc:	bf00      	nop
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000110 	.word	0x20000110

080045c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <MX_USART2_UART_Init+0x50>)
 80045d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045ee:	2208      	movs	r2, #8
 80045f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045fe:	4805      	ldr	r0, [pc, #20]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 8004600:	f7fe ff05 	bl	800340e <HAL_UART_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800460a:	f000 f886 	bl	800471a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000158 	.word	0x20000158
 8004618:	40004400 	.word	0x40004400

0800461c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <MX_DMA_Init+0x38>)
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <MX_DMA_Init+0x38>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6153      	str	r3, [r2, #20]
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <MX_DMA_Init+0x38>)
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	2100      	movs	r1, #0
 800463e:	2011      	movs	r0, #17
 8004640:	f7fb febd 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004644:	2011      	movs	r0, #17
 8004646:	f7fb fed6 	bl	80003f6 <HAL_NVIC_EnableIRQ>

}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000

08004658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465e:	f107 0310 	add.w	r3, r7, #16
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <MX_GPIO_Init+0xa8>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4a23      	ldr	r2, [pc, #140]	; (8004700 <MX_GPIO_Init+0xa8>)
 8004672:	f043 0310 	orr.w	r3, r3, #16
 8004676:	6193      	str	r3, [r2, #24]
 8004678:	4b21      	ldr	r3, [pc, #132]	; (8004700 <MX_GPIO_Init+0xa8>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004684:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <MX_GPIO_Init+0xa8>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	4a1d      	ldr	r2, [pc, #116]	; (8004700 <MX_GPIO_Init+0xa8>)
 800468a:	f043 0320 	orr.w	r3, r3, #32
 800468e:	6193      	str	r3, [r2, #24]
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <MX_GPIO_Init+0xa8>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800469c:	4b18      	ldr	r3, [pc, #96]	; (8004700 <MX_GPIO_Init+0xa8>)
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	4a17      	ldr	r2, [pc, #92]	; (8004700 <MX_GPIO_Init+0xa8>)
 80046a2:	f043 0304 	orr.w	r3, r3, #4
 80046a6:	6193      	str	r3, [r2, #24]
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <MX_GPIO_Init+0xa8>)
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b4:	4b12      	ldr	r3, [pc, #72]	; (8004700 <MX_GPIO_Init+0xa8>)
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	4a11      	ldr	r2, [pc, #68]	; (8004700 <MX_GPIO_Init+0xa8>)
 80046ba:	f043 0308 	orr.w	r3, r3, #8
 80046be:	6193      	str	r3, [r2, #24]
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <MX_GPIO_Init+0xa8>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80046cc:	2200      	movs	r2, #0
 80046ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046d2:	480c      	ldr	r0, [pc, #48]	; (8004704 <MX_GPIO_Init+0xac>)
 80046d4:	f7fc fa14 	bl	8000b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80046d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e6:	2302      	movs	r3, #2
 80046e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80046ea:	f107 0310 	add.w	r3, r7, #16
 80046ee:	4619      	mov	r1, r3
 80046f0:	4804      	ldr	r0, [pc, #16]	; (8004704 <MX_GPIO_Init+0xac>)
 80046f2:	f7fc f8ab 	bl	800084c <HAL_GPIO_Init>

}
 80046f6:	bf00      	nop
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	40011000 	.word	0x40011000

08004708 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

   // MOTOR_process(as5600_angle);

}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800471a:	b480      	push	{r7}
 800471c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800471e:	bf00      	nop
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
	...

08004728 <MOTOR_init>:
		494,
		503
};

void MOTOR_init(TIM_HandleTypeDef timer, UART_HandleTypeDef uart)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b580      	push	{r7, lr}
 800472c:	af00      	add	r7, sp, #0
 800472e:	f107 0c08 	add.w	ip, r7, #8
 8004732:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	htim1 = timer;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <MOTOR_init+0x3c>)
 8004738:	4618      	mov	r0, r3
 800473a:	f107 0108 	add.w	r1, r7, #8
 800473e:	2348      	movs	r3, #72	; 0x48
 8004740:	461a      	mov	r2, r3
 8004742:	f000 fa35 	bl	8004bb0 <memcpy>
	huart2 = uart;
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <MOTOR_init+0x40>)
 8004748:	4618      	mov	r0, r3
 800474a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800474e:	2244      	movs	r2, #68	; 0x44
 8004750:	4619      	mov	r1, r3
 8004752:	f000 fa2d 	bl	8004bb0 <memcpy>
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800475e:	b004      	add	sp, #16
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	200000c8 	.word	0x200000c8
 8004768:	20000158 	.word	0x20000158

0800476c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_MspInit+0x5c>)
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <HAL_MspInit+0x5c>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6193      	str	r3, [r2, #24]
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_MspInit+0x5c>)
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <HAL_MspInit+0x5c>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <HAL_MspInit+0x5c>)
 8004790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004794:	61d3      	str	r3, [r2, #28]
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <HAL_MspInit+0x5c>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047a2:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <HAL_MspInit+0x60>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_MspInit+0x60>)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047be:	bf00      	nop
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40010000 	.word	0x40010000

080047d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d8:	f107 0310 	add.w	r3, r7, #16
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_I2C_MspInit+0x74>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d124      	bne.n	800483a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f0:	4b15      	ldr	r3, [pc, #84]	; (8004848 <HAL_I2C_MspInit+0x78>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <HAL_I2C_MspInit+0x78>)
 80047f6:	f043 0308 	orr.w	r3, r3, #8
 80047fa:	6193      	str	r3, [r2, #24]
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_I2C_MspInit+0x78>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004808:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800480c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800480e:	2312      	movs	r3, #18
 8004810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004812:	2303      	movs	r3, #3
 8004814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004816:	f107 0310 	add.w	r3, r7, #16
 800481a:	4619      	mov	r1, r3
 800481c:	480b      	ldr	r0, [pc, #44]	; (800484c <HAL_I2C_MspInit+0x7c>)
 800481e:	f7fc f815 	bl	800084c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_I2C_MspInit+0x78>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <HAL_I2C_MspInit+0x78>)
 8004828:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800482c:	61d3      	str	r3, [r2, #28]
 800482e:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_I2C_MspInit+0x78>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800483a:	bf00      	nop
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40005800 	.word	0x40005800
 8004848:	40021000 	.word	0x40021000
 800484c:	40010c00 	.word	0x40010c00

08004850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <HAL_TIM_Base_MspInit+0x68>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10c      	bne.n	800487c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004862:	4b16      	ldr	r3, [pc, #88]	; (80048bc <HAL_TIM_Base_MspInit+0x6c>)
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	4a15      	ldr	r2, [pc, #84]	; (80048bc <HAL_TIM_Base_MspInit+0x6c>)
 8004868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800486c:	6193      	str	r3, [r2, #24]
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <HAL_TIM_Base_MspInit+0x6c>)
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800487a:	e018      	b.n	80048ae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004884:	d113      	bne.n	80048ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <HAL_TIM_Base_MspInit+0x6c>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4a0c      	ldr	r2, [pc, #48]	; (80048bc <HAL_TIM_Base_MspInit+0x6c>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	61d3      	str	r3, [r2, #28]
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <HAL_TIM_Base_MspInit+0x6c>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800489e:	2200      	movs	r2, #0
 80048a0:	2100      	movs	r1, #0
 80048a2:	201c      	movs	r0, #28
 80048a4:	f7fb fd8b 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80048a8:	201c      	movs	r0, #28
 80048aa:	f7fb fda4 	bl	80003f6 <HAL_NVIC_EnableIRQ>
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40021000 	.word	0x40021000

080048c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a25      	ldr	r2, [pc, #148]	; (8004970 <HAL_TIM_MspPostInit+0xb0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d142      	bne.n	8004966 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e0:	4b24      	ldr	r3, [pc, #144]	; (8004974 <HAL_TIM_MspPostInit+0xb4>)
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	4a23      	ldr	r2, [pc, #140]	; (8004974 <HAL_TIM_MspPostInit+0xb4>)
 80048e6:	f043 0304 	orr.w	r3, r3, #4
 80048ea:	6193      	str	r3, [r2, #24]
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <HAL_TIM_MspPostInit+0xb4>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f8:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_TIM_MspPostInit+0xb4>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_TIM_MspPostInit+0xb4>)
 80048fe:	f043 0308 	orr.w	r3, r3, #8
 8004902:	6193      	str	r3, [r2, #24]
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <HAL_TIM_MspPostInit+0xb4>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004910:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004916:	2302      	movs	r3, #2
 8004918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491a:	2302      	movs	r3, #2
 800491c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	4619      	mov	r1, r3
 8004924:	4814      	ldr	r0, [pc, #80]	; (8004978 <HAL_TIM_MspPostInit+0xb8>)
 8004926:	f7fb ff91 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800492a:	2303      	movs	r3, #3
 800492c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492e:	2302      	movs	r3, #2
 8004930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004932:	2302      	movs	r3, #2
 8004934:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004936:	f107 0314 	add.w	r3, r7, #20
 800493a:	4619      	mov	r1, r3
 800493c:	480f      	ldr	r0, [pc, #60]	; (800497c <HAL_TIM_MspPostInit+0xbc>)
 800493e:	f7fb ff85 	bl	800084c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_TIM_MspPostInit+0xc0>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
 8004960:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_TIM_MspPostInit+0xc0>)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004966:	bf00      	nop
 8004968:	3728      	adds	r7, #40	; 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40021000 	.word	0x40021000
 8004978:	40010800 	.word	0x40010800
 800497c:	40010c00 	.word	0x40010c00
 8004980:	40010000 	.word	0x40010000

08004984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a33      	ldr	r2, [pc, #204]	; (8004a6c <HAL_UART_MspInit+0xe8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d15e      	bne.n	8004a62 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049a4:	4b32      	ldr	r3, [pc, #200]	; (8004a70 <HAL_UART_MspInit+0xec>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	4a31      	ldr	r2, [pc, #196]	; (8004a70 <HAL_UART_MspInit+0xec>)
 80049aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ae:	61d3      	str	r3, [r2, #28]
 80049b0:	4b2f      	ldr	r3, [pc, #188]	; (8004a70 <HAL_UART_MspInit+0xec>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049bc:	4b2c      	ldr	r3, [pc, #176]	; (8004a70 <HAL_UART_MspInit+0xec>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	4a2b      	ldr	r2, [pc, #172]	; (8004a70 <HAL_UART_MspInit+0xec>)
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	6193      	str	r3, [r2, #24]
 80049c8:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <HAL_UART_MspInit+0xec>)
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049d4:	2304      	movs	r3, #4
 80049d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d8:	2302      	movs	r3, #2
 80049da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049dc:	2303      	movs	r3, #3
 80049de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	4619      	mov	r1, r3
 80049e6:	4823      	ldr	r0, [pc, #140]	; (8004a74 <HAL_UART_MspInit+0xf0>)
 80049e8:	f7fb ff30 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80049ec:	2308      	movs	r3, #8
 80049ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f8:	f107 0310 	add.w	r3, r7, #16
 80049fc:	4619      	mov	r1, r3
 80049fe:	481d      	ldr	r0, [pc, #116]	; (8004a74 <HAL_UART_MspInit+0xf0>)
 8004a00:	f7fb ff24 	bl	800084c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004a04:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a06:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_UART_MspInit+0xf8>)
 8004a08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a18:	2280      	movs	r2, #128	; 0x80
 8004a1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a1c:	4b16      	ldr	r3, [pc, #88]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a30:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004a34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a36:	4810      	ldr	r0, [pc, #64]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a38:	f7fb fcf8 	bl	800042c <HAL_DMA_Init>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8004a42:	f7ff fe6a 	bl	800471a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a0b      	ldr	r2, [pc, #44]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a4a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a4c:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <HAL_UART_MspInit+0xf4>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2100      	movs	r1, #0
 8004a56:	2026      	movs	r0, #38	; 0x26
 8004a58:	f7fb fcb1 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a5c:	2026      	movs	r0, #38	; 0x26
 8004a5e:	f7fb fcca 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a62:	bf00      	nop
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40004400 	.word	0x40004400
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40010800 	.word	0x40010800
 8004a78:	20000084 	.word	0x20000084
 8004a7c:	40020080 	.word	0x40020080

08004a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a90:	e7fe      	b.n	8004a90 <HardFault_Handler+0x4>

08004a92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a96:	e7fe      	b.n	8004a96 <MemManage_Handler+0x4>

08004a98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a9c:	e7fe      	b.n	8004a9c <BusFault_Handler+0x4>

08004a9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004aa2:	e7fe      	b.n	8004aa2 <UsageFault_Handler+0x4>

08004aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004aa8:	bf00      	nop
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004acc:	f7fb fb84 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ad8:	4802      	ldr	r0, [pc, #8]	; (8004ae4 <DMA1_Channel7_IRQHandler+0x10>)
 8004ada:	f7fb fdb1 	bl	8000640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000084 	.word	0x20000084

08004ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004aec:	4802      	ldr	r0, [pc, #8]	; (8004af8 <TIM2_IRQHandler+0x10>)
 8004aee:	f7fd fdc5 	bl	800267c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000110 	.word	0x20000110

08004afc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b00:	4802      	ldr	r0, [pc, #8]	; (8004b0c <USART2_IRQHandler+0x10>)
 8004b02:	f7fe fcd1 	bl	80034a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b06:	bf00      	nop
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000158 	.word	0x20000158

08004b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b1c:	480c      	ldr	r0, [pc, #48]	; (8004b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b1e:	490d      	ldr	r1, [pc, #52]	; (8004b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b20:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b24:	e002      	b.n	8004b2c <LoopCopyDataInit>

08004b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b2a:	3304      	adds	r3, #4

08004b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b30:	d3f9      	bcc.n	8004b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b32:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b34:	4c0a      	ldr	r4, [pc, #40]	; (8004b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b38:	e001      	b.n	8004b3e <LoopFillZerobss>

08004b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b3c:	3204      	adds	r2, #4

08004b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b40:	d3fb      	bcc.n	8004b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b42:	f7ff ffe5 	bl	8004b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b46:	f000 f80f 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b4a:	f7ff fb49 	bl	80041e0 <main>
  bx lr
 8004b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8004b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004b58:	08004c24 	.word	0x08004c24
  ldr r2, =_sbss
 8004b5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004b60:	200001b4 	.word	0x200001b4

08004b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b64:	e7fe      	b.n	8004b64 <ADC1_2_IRQHandler>
	...

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	2500      	movs	r5, #0
 8004b6c:	4e0c      	ldr	r6, [pc, #48]	; (8004ba0 <__libc_init_array+0x38>)
 8004b6e:	4c0d      	ldr	r4, [pc, #52]	; (8004ba4 <__libc_init_array+0x3c>)
 8004b70:	1ba4      	subs	r4, r4, r6
 8004b72:	10a4      	asrs	r4, r4, #2
 8004b74:	42a5      	cmp	r5, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	f000 f82e 	bl	8004bd8 <_init>
 8004b7c:	2500      	movs	r5, #0
 8004b7e:	4e0a      	ldr	r6, [pc, #40]	; (8004ba8 <__libc_init_array+0x40>)
 8004b80:	4c0a      	ldr	r4, [pc, #40]	; (8004bac <__libc_init_array+0x44>)
 8004b82:	1ba4      	subs	r4, r4, r6
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	42a5      	cmp	r5, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b90:	4798      	blx	r3
 8004b92:	3501      	adds	r5, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b9a:	4798      	blx	r3
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	08004c1c 	.word	0x08004c1c
 8004ba4:	08004c1c 	.word	0x08004c1c
 8004ba8:	08004c1c 	.word	0x08004c1c
 8004bac:	08004c20 	.word	0x08004c20

08004bb0 <memcpy>:
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	1e43      	subs	r3, r0, #1
 8004bb4:	440a      	add	r2, r1
 8004bb6:	4291      	cmp	r1, r2
 8004bb8:	d100      	bne.n	8004bbc <memcpy+0xc>
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc4:	e7f7      	b.n	8004bb6 <memcpy+0x6>

08004bc6 <memset>:
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4402      	add	r2, r0
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d100      	bne.n	8004bd0 <memset+0xa>
 8004bce:	4770      	bx	lr
 8004bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd4:	e7f9      	b.n	8004bca <memset+0x4>
	...

08004bd8 <_init>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr

08004be4 <_fini>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr
